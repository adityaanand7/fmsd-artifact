//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors must implement this interface.
 */

public interface GJVisitor<R,A> {

   //
   // GJ Auto class visitors
   //

   public R visit(NodeList n, A argu);
   public R visit(NodeListOptional n, A argu);
   public R visit(NodeOptional n, A argu);
   public R visit(NodeSequence n, A argu);
   public R visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( CompleteConditionalValues() )*
    * f1 -> <EOF>
    */
   public R visit(Goal n, A argu);

   /**
    * f0 -> ProgramElement()
    * f1 -> " = "
    * f2 -> ( ConditionalValues() )*
    */
   public R visit(CompleteConditionalValues n, A argu);

   /**
    * f0 -> "<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ParmNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">"
    */
   public R visit(ProgramElement n, A argu);

   /**
    * f0 -> LocalType()
    *       | ParameterType()
    *       | ReturnType()
    *       | ArgumentType()
    *       | FieldType()
    *       | CallBackType()
    */
   public R visit(ConditionalValues n, A argu);

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ParmNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(LocalType n, A argu);

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ParmNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(ParameterType n, A argu);

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ParmNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(ReturnType n, A argu);

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ArgNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(ArgumentType n, A argu);

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ArgNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(FieldType n, A argu);

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ArgNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(CallBackType n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> ( ClassNameRest() )*
    */
   public R visit(ClassName n, A argu);

   /**
    * f0 -> "."
    * f1 -> Identifier()
    */
   public R visit(ClassNameRest n, A argu);

   /**
    * f0 -> Identifier()
    */
   public R visit(MethodName n, A argu);

   /**
    * f0 -> "local1"
    *       | "argmnt"
    *       | "parmtr"
    *       | "retrn"
    *       | "field5"
    *       | "callback"
    */
   public R visit(TypeTag n, A argu);

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(ArgNumber n, A argu);

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(ParmNumber n, A argu);

   /**
    * f0 -> "<"
    * f1 -> ( Identifier() )*
    * f2 -> ">"
    */
   public R visit(FieldList n, A argu);

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu);

   /**
    * f0 -> "D"
    *       | "E"
    */
   public R visit(DependencyValue n, A argu);

   /**
    * f0 -> "D"
    *       | "E"
    */
   public R visit(ResolvedValue n, A argu);

}
