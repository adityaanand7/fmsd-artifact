//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( CompleteConditionalValues() )*
    * f1 -> <EOF>
    */
   public void visit(Goal n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> ProgramElement()
    * f1 -> " = "
    * f2 -> ( ConditionalValues() )*
    */
   public void visit(CompleteConditionalValues n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> "<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ParmNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">"
    */
   public void visit(ProgramElement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
   }

   /**
    * f0 -> LocalType()
    *       | ParameterType()
    *       | ReturnType()
    *       | ArgumentType()
    *       | FieldType()
    *       | CallBackType()
    */
   public void visit(ConditionalValues n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ParmNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public void visit(LocalType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ParmNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public void visit(ParameterType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ParmNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public void visit(ReturnType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ArgNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public void visit(ArgumentType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ArgNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public void visit(FieldType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ArgNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public void visit(CallBackType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
   }

   /**
    * f0 -> "Static"
    *       | "Dynamic"
    *       | "SuperD"
    */
   public void visit(EvalStatus n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ClassNameRest() )*
    */
   public void visit(ClassName n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "."
    * f1 -> Identifier()
    */
   public void visit(ClassNameRest n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    */
   public void visit(MethodName n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "local1"
    *       | "argmnt"
    *       | "parmtr"
    *       | "retrn"
    *       | "field5"
    *       | "callback"
    */
   public void visit(TypeTag n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(ArgNumber n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(ParmNumber n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "<"
    * f1 -> Identifier()
    * f2 -> ">"
    */
   public void visit(FieldList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "D"
    *       | "E"
    */
   public void visit(DependencyValue n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "D"
    *       | "E"
    */
   public void visit(ResolvedValue n, A argu) {
      n.f0.accept(this, argu);
   }

}
