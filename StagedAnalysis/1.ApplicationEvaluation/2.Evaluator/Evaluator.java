/* Evaluator.java */
/* Generated By:JavaCC: Do not edit this line. Evaluator.java */
import syntaxtree.*;
import java.util.Vector;


public class Evaluator implements EvaluatorConstants {

  static final public Goal Goal() throws ParseException {NodeListOptional n0 = new NodeListOptional();
   CompleteConditionalValues n1;
   NodeToken n2;
   Token n3;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n1 = CompleteConditionalValues();
n0.addNode(n1);
    }
n0.nodes.trimToSize();
    n3 = jj_consume_token(0);
n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
{if ("" != null) return new Goal(n0,n2);}
    throw new Error("Missing return statement in function");
}

  static final public CompleteConditionalValues CompleteConditionalValues() throws ParseException {ProgramElement n0;
   NodeToken n1;
   Token n2;
   NodeListOptional n3 = new NodeListOptional();
   ConditionalValues n4;
    n0 = ProgramElement();
    n2 = jj_consume_token(28);
n1 = JTBToolkit.makeNodeToken(n2);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 30:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      n4 = ConditionalValues();
n3.addNode(n4);
    }
n3.nodes.trimToSize();
{if ("" != null) return new CompleteConditionalValues(n0,n1,n3);}
    throw new Error("Missing return statement in function");
}

  static final public ProgramElement ProgramElement() throws ParseException {NodeToken n0;
   Token n1;
   EvalStatus n2;
   NodeToken n3;
   Token n4;
   ClassName n5;
   NodeToken n6;
   Token n7;
   MethodName n8;
   NodeToken n9;
   Token n10;
   TypeTag n11;
   NodeToken n12;
   Token n13;
   ParmNumber n14;
   NodeToken n15;
   Token n16;
   FieldList n17;
   NodeToken n18;
   Token n19;
    n1 = jj_consume_token(LBRACKET);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EvalStatus();
    n4 = jj_consume_token(COMMA);
n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ClassName();
    n7 = jj_consume_token(29);
n6 = JTBToolkit.makeNodeToken(n7);
    n8 = MethodName();
    n10 = jj_consume_token(COMMA);
n9 = JTBToolkit.makeNodeToken(n10);
    n11 = TypeTag();
    n13 = jj_consume_token(COMMA);
n12 = JTBToolkit.makeNodeToken(n13);
    n14 = ParmNumber();
    n16 = jj_consume_token(COMMA);
n15 = JTBToolkit.makeNodeToken(n16);
    n17 = FieldList();
    n19 = jj_consume_token(RBRACKET);
n18 = JTBToolkit.makeNodeToken(n19);
{if ("" != null) return new ProgramElement(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18);}
    throw new Error("Missing return statement in function");
}

  static final public ConditionalValues ConditionalValues() throws ParseException {NodeChoice n0;
   LocalType n1;
   ParameterType n2;
   ReturnType n3;
   ArgumentType n4;
   FieldType n5;
   CallBackType n6;
    if (jj_2_1(10)) {
      n1 = LocalType();
n0 = new NodeChoice(n1, 0);
    } else if (jj_2_2(10)) {
      n2 = ParameterType();
n0 = new NodeChoice(n2, 1);
    } else if (jj_2_3(10)) {
      n3 = ReturnType();
n0 = new NodeChoice(n3, 2);
    } else if (jj_2_4(10)) {
      n4 = ArgumentType();
n0 = new NodeChoice(n4, 3);
    } else if (jj_2_5(10)) {
      n5 = FieldType();
n0 = new NodeChoice(n5, 4);
    } else if (jj_2_6(10)) {
      n6 = CallBackType();
n0 = new NodeChoice(n6, 5);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new ConditionalValues(n0);}
    throw new Error("Missing return statement in function");
}

  static final public LocalType LocalType() throws ParseException {NodeToken n0;
   Token n1;
   EvalStatus n2;
   NodeToken n3;
   Token n4;
   ClassName n5;
   NodeToken n6;
   Token n7;
   MethodName n8;
   NodeToken n9;
   Token n10;
   TypeTag n11;
   NodeToken n12;
   Token n13;
   ParmNumber n14;
   NodeToken n15;
   Token n16;
   FieldList n17;
   NodeToken n18;
   Token n19;
   DependencyValue n20;
   NodeToken n21;
   Token n22;
   ResolvedValue n23;
   NodeToken n24;
   Token n25;
    n1 = jj_consume_token(30);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EvalStatus();
    n4 = jj_consume_token(COMMA);
n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ClassName();
    n7 = jj_consume_token(29);
n6 = JTBToolkit.makeNodeToken(n7);
    n8 = MethodName();
    n10 = jj_consume_token(COMMA);
n9 = JTBToolkit.makeNodeToken(n10);
    n11 = TypeTag();
    n13 = jj_consume_token(COMMA);
n12 = JTBToolkit.makeNodeToken(n13);
    n14 = ParmNumber();
    n16 = jj_consume_token(COMMA);
n15 = JTBToolkit.makeNodeToken(n16);
    n17 = FieldList();
    n19 = jj_consume_token(31);
n18 = JTBToolkit.makeNodeToken(n19);
    n20 = DependencyValue();
    n22 = jj_consume_token(COMMA);
n21 = JTBToolkit.makeNodeToken(n22);
    n23 = ResolvedValue();
    n25 = jj_consume_token(32);
n24 = JTBToolkit.makeNodeToken(n25);
{if ("" != null) return new LocalType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21,n23,n24);}
    throw new Error("Missing return statement in function");
}

  static final public ParameterType ParameterType() throws ParseException {NodeToken n0;
   Token n1;
   EvalStatus n2;
   NodeToken n3;
   Token n4;
   ClassName n5;
   NodeToken n6;
   Token n7;
   MethodName n8;
   NodeToken n9;
   Token n10;
   TypeTag n11;
   NodeToken n12;
   Token n13;
   ParmNumber n14;
   NodeToken n15;
   Token n16;
   FieldList n17;
   NodeToken n18;
   Token n19;
   DependencyValue n20;
   NodeToken n21;
   Token n22;
   ResolvedValue n23;
   NodeToken n24;
   Token n25;
    n1 = jj_consume_token(30);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EvalStatus();
    n4 = jj_consume_token(COMMA);
n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ClassName();
    n7 = jj_consume_token(29);
n6 = JTBToolkit.makeNodeToken(n7);
    n8 = MethodName();
    n10 = jj_consume_token(COMMA);
n9 = JTBToolkit.makeNodeToken(n10);
    n11 = TypeTag();
    n13 = jj_consume_token(COMMA);
n12 = JTBToolkit.makeNodeToken(n13);
    n14 = ParmNumber();
    n16 = jj_consume_token(COMMA);
n15 = JTBToolkit.makeNodeToken(n16);
    n17 = FieldList();
    n19 = jj_consume_token(31);
n18 = JTBToolkit.makeNodeToken(n19);
    n20 = DependencyValue();
    n22 = jj_consume_token(COMMA);
n21 = JTBToolkit.makeNodeToken(n22);
    n23 = ResolvedValue();
    n25 = jj_consume_token(32);
n24 = JTBToolkit.makeNodeToken(n25);
{if ("" != null) return new ParameterType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21,n23,n24);}
    throw new Error("Missing return statement in function");
}

  static final public ReturnType ReturnType() throws ParseException {NodeToken n0;
   Token n1;
   EvalStatus n2;
   NodeToken n3;
   Token n4;
   ClassName n5;
   NodeToken n6;
   Token n7;
   MethodName n8;
   NodeToken n9;
   Token n10;
   TypeTag n11;
   NodeToken n12;
   Token n13;
   ParmNumber n14;
   NodeToken n15;
   Token n16;
   FieldList n17;
   NodeToken n18;
   Token n19;
   DependencyValue n20;
   NodeToken n21;
   Token n22;
   ResolvedValue n23;
   NodeToken n24;
   Token n25;
    n1 = jj_consume_token(30);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EvalStatus();
    n4 = jj_consume_token(COMMA);
n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ClassName();
    n7 = jj_consume_token(29);
n6 = JTBToolkit.makeNodeToken(n7);
    n8 = MethodName();
    n10 = jj_consume_token(COMMA);
n9 = JTBToolkit.makeNodeToken(n10);
    n11 = TypeTag();
    n13 = jj_consume_token(COMMA);
n12 = JTBToolkit.makeNodeToken(n13);
    n14 = ParmNumber();
    n16 = jj_consume_token(COMMA);
n15 = JTBToolkit.makeNodeToken(n16);
    n17 = FieldList();
    n19 = jj_consume_token(31);
n18 = JTBToolkit.makeNodeToken(n19);
    n20 = DependencyValue();
    n22 = jj_consume_token(COMMA);
n21 = JTBToolkit.makeNodeToken(n22);
    n23 = ResolvedValue();
    n25 = jj_consume_token(32);
n24 = JTBToolkit.makeNodeToken(n25);
{if ("" != null) return new ReturnType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21,n23,n24);}
    throw new Error("Missing return statement in function");
}

  static final public ArgumentType ArgumentType() throws ParseException {NodeToken n0;
   Token n1;
   EvalStatus n2;
   NodeToken n3;
   Token n4;
   ClassName n5;
   NodeToken n6;
   Token n7;
   MethodName n8;
   NodeToken n9;
   Token n10;
   TypeTag n11;
   NodeToken n12;
   Token n13;
   ArgNumber n14;
   NodeToken n15;
   Token n16;
   FieldList n17;
   NodeToken n18;
   Token n19;
   DependencyValue n20;
   NodeToken n21;
   Token n22;
   ResolvedValue n23;
   NodeToken n24;
   Token n25;
    n1 = jj_consume_token(30);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EvalStatus();
    n4 = jj_consume_token(COMMA);
n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ClassName();
    n7 = jj_consume_token(29);
n6 = JTBToolkit.makeNodeToken(n7);
    n8 = MethodName();
    n10 = jj_consume_token(COMMA);
n9 = JTBToolkit.makeNodeToken(n10);
    n11 = TypeTag();
    n13 = jj_consume_token(COMMA);
n12 = JTBToolkit.makeNodeToken(n13);
    n14 = ArgNumber();
    n16 = jj_consume_token(COMMA);
n15 = JTBToolkit.makeNodeToken(n16);
    n17 = FieldList();
    n19 = jj_consume_token(31);
n18 = JTBToolkit.makeNodeToken(n19);
    n20 = DependencyValue();
    n22 = jj_consume_token(COMMA);
n21 = JTBToolkit.makeNodeToken(n22);
    n23 = ResolvedValue();
    n25 = jj_consume_token(32);
n24 = JTBToolkit.makeNodeToken(n25);
{if ("" != null) return new ArgumentType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21,n23,n24);}
    throw new Error("Missing return statement in function");
}

  static final public FieldType FieldType() throws ParseException {NodeToken n0;
   Token n1;
   EvalStatus n2;
   NodeToken n3;
   Token n4;
   ClassName n5;
   NodeToken n6;
   Token n7;
   MethodName n8;
   NodeToken n9;
   Token n10;
   TypeTag n11;
   NodeToken n12;
   Token n13;
   ArgNumber n14;
   NodeToken n15;
   Token n16;
   FieldList n17;
   NodeToken n18;
   Token n19;
   DependencyValue n20;
   NodeToken n21;
   Token n22;
   ResolvedValue n23;
   NodeToken n24;
   Token n25;
    n1 = jj_consume_token(30);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EvalStatus();
    n4 = jj_consume_token(COMMA);
n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ClassName();
    n7 = jj_consume_token(29);
n6 = JTBToolkit.makeNodeToken(n7);
    n8 = MethodName();
    n10 = jj_consume_token(COMMA);
n9 = JTBToolkit.makeNodeToken(n10);
    n11 = TypeTag();
    n13 = jj_consume_token(COMMA);
n12 = JTBToolkit.makeNodeToken(n13);
    n14 = ArgNumber();
    n16 = jj_consume_token(COMMA);
n15 = JTBToolkit.makeNodeToken(n16);
    n17 = FieldList();
    n19 = jj_consume_token(31);
n18 = JTBToolkit.makeNodeToken(n19);
    n20 = DependencyValue();
    n22 = jj_consume_token(COMMA);
n21 = JTBToolkit.makeNodeToken(n22);
    n23 = ResolvedValue();
    n25 = jj_consume_token(32);
n24 = JTBToolkit.makeNodeToken(n25);
{if ("" != null) return new FieldType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21,n23,n24);}
    throw new Error("Missing return statement in function");
}

  static final public CallBackType CallBackType() throws ParseException {NodeToken n0;
   Token n1;
   EvalStatus n2;
   NodeToken n3;
   Token n4;
   ClassName n5;
   NodeToken n6;
   Token n7;
   MethodName n8;
   NodeToken n9;
   Token n10;
   TypeTag n11;
   NodeToken n12;
   Token n13;
   ArgNumber n14;
   NodeToken n15;
   Token n16;
   FieldList n17;
   NodeToken n18;
   Token n19;
   DependencyValue n20;
   NodeToken n21;
   Token n22;
   ResolvedValue n23;
   NodeToken n24;
   Token n25;
    n1 = jj_consume_token(30);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EvalStatus();
    n4 = jj_consume_token(COMMA);
n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ClassName();
    n7 = jj_consume_token(29);
n6 = JTBToolkit.makeNodeToken(n7);
    n8 = MethodName();
    n10 = jj_consume_token(COMMA);
n9 = JTBToolkit.makeNodeToken(n10);
    n11 = TypeTag();
    n13 = jj_consume_token(COMMA);
n12 = JTBToolkit.makeNodeToken(n13);
    n14 = ArgNumber();
    n16 = jj_consume_token(COMMA);
n15 = JTBToolkit.makeNodeToken(n16);
    n17 = FieldList();
    n19 = jj_consume_token(31);
n18 = JTBToolkit.makeNodeToken(n19);
    n20 = DependencyValue();
    n22 = jj_consume_token(COMMA);
n21 = JTBToolkit.makeNodeToken(n22);
    n23 = ResolvedValue();
    n25 = jj_consume_token(32);
n24 = JTBToolkit.makeNodeToken(n25);
{if ("" != null) return new CallBackType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21,n23,n24);}
    throw new Error("Missing return statement in function");
}

  static final public EvalStatus EvalStatus() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STATIC:{
      n2 = jj_consume_token(STATIC);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case DYNAMIC:{
      n4 = jj_consume_token(DYNAMIC);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    case SUPERD:{
      n6 = jj_consume_token(SUPERD);
n5 = JTBToolkit.makeNodeToken(n6);
n0 = new NodeChoice(n5, 2);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new EvalStatus(n0);}
    throw new Error("Missing return statement in function");
}

  static final public ClassName ClassName() throws ParseException {Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassNameRest n2;
    n0 = Identifier();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      n2 = ClassNameRest();
n1.addNode(n2);
    }
n1.nodes.trimToSize();
{if ("" != null) return new ClassName(n0,n1);}
    throw new Error("Missing return statement in function");
}

  static final public ClassNameRest ClassNameRest() throws ParseException {NodeToken n0;
   Token n1;
   Identifier n2;
    n1 = jj_consume_token(33);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
{if ("" != null) return new ClassNameRest(n0,n2);}
    throw new Error("Missing return statement in function");
}

  static final public MethodName MethodName() throws ParseException {Identifier n0;
    n0 = Identifier();
{if ("" != null) return new MethodName(n0);}
    throw new Error("Missing return statement in function");
}

  static final public TypeTag TypeTag() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LOCAL:{
      n2 = jj_consume_token(LOCAL);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case ARGUMENT:{
      n4 = jj_consume_token(ARGUMENT);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    case PARAMETER:{
      n6 = jj_consume_token(PARAMETER);
n5 = JTBToolkit.makeNodeToken(n6);
n0 = new NodeChoice(n5, 2);
      break;
      }
    case RETURN:{
      n8 = jj_consume_token(RETURN);
n7 = JTBToolkit.makeNodeToken(n8);
n0 = new NodeChoice(n7, 3);
      break;
      }
    case FIELD:{
      n10 = jj_consume_token(FIELD);
n9 = JTBToolkit.makeNodeToken(n10);
n0 = new NodeChoice(n9, 4);
      break;
      }
    case CALLBACK:{
      n12 = jj_consume_token(CALLBACK);
n11 = JTBToolkit.makeNodeToken(n12);
n0 = new NodeChoice(n11, 5);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new TypeTag(n0);}
    throw new Error("Missing return statement in function");
}

  static final public ArgNumber ArgNumber() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new ArgNumber(n0);}
    throw new Error("Missing return statement in function");
}

  static final public ParmNumber ParmNumber() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new ParmNumber(n0);}
    throw new Error("Missing return statement in function");
}

  static final public FieldList FieldList() throws ParseException {NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LBRACKET);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(RBRACKET);
n3 = JTBToolkit.makeNodeToken(n4);
{if ("" != null) return new FieldList(n0,n2,n3);}
    throw new Error("Missing return statement in function");
}

  static final public Identifier Identifier() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
}

  static final public DependencyValue DependencyValue() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DONOTESCAPE:{
      n2 = jj_consume_token(DONOTESCAPE);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case ESCAPE:{
      n4 = jj_consume_token(ESCAPE);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new DependencyValue(n0);}
    throw new Error("Missing return statement in function");
}

  static final public ResolvedValue ResolvedValue() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DONOTESCAPE:{
      n2 = jj_consume_token(DONOTESCAPE);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case ESCAPE:{
      n4 = jj_consume_token(ESCAPE);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new ResolvedValue(n0);}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_ParameterType_289_4_5()) return true;
    return false;
  }

  static private boolean jj_3R_ClassName_558_4_11()
 {
    if (jj_3R_Identifier_689_4_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ClassName_560_7_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_LocalType_236_4_4()) return true;
    return false;
  }

  static private boolean jj_3R_ArgNumber_645_4_15()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_Identifier_689_4_19()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_CallBackType_501_4_9()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_EvalStatus_535_4_10()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ClassName_558_4_11()) return true;
    if (jj_scan_token(29)) return true;
    if (jj_3R_MethodName_590_4_12()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TypeTag_614_4_13()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ArgNumber_645_4_15()) return true;
    return false;
  }

  static private boolean jj_3R_EvalStatus_542_7_18()
 {
    if (jj_scan_token(SUPERD)) return true;
    return false;
  }

  static private boolean jj_3R_MethodName_590_4_12()
 {
    if (jj_3R_Identifier_689_4_19()) return true;
    return false;
  }

  static private boolean jj_3R_EvalStatus_539_7_17()
 {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  static private boolean jj_3R_FieldType_448_4_8()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_EvalStatus_535_4_10()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ClassName_558_4_11()) return true;
    if (jj_scan_token(29)) return true;
    if (jj_3R_MethodName_590_4_12()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TypeTag_614_4_13()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ArgNumber_645_4_15()) return true;
    return false;
  }

  static private boolean jj_3R_TypeTag_630_7_26()
 {
    if (jj_scan_token(CALLBACK)) return true;
    return false;
  }

  static private boolean jj_3R_EvalStatus_536_7_16()
 {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_TypeTag_627_7_25()
 {
    if (jj_scan_token(FIELD)) return true;
    return false;
  }

  static private boolean jj_3R_ArgumentType_395_4_7()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_EvalStatus_535_4_10()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ClassName_558_4_11()) return true;
    if (jj_scan_token(29)) return true;
    if (jj_3R_MethodName_590_4_12()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TypeTag_614_4_13()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ArgNumber_645_4_15()) return true;
    return false;
  }

  static private boolean jj_3R_EvalStatus_535_4_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EvalStatus_536_7_16()) {
    jj_scanpos = xsp;
    if (jj_3R_EvalStatus_539_7_17()) {
    jj_scanpos = xsp;
    if (jj_3R_EvalStatus_542_7_18()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_TypeTag_624_7_24()
 {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_ClassNameRest_577_4_27()
 {
    if (jj_scan_token(33)) return true;
    if (jj_3R_Identifier_689_4_19()) return true;
    return false;
  }

  static private boolean jj_3R_TypeTag_621_7_23()
 {
    if (jj_scan_token(PARAMETER)) return true;
    return false;
  }

  static private boolean jj_3R_ReturnType_342_4_6()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_EvalStatus_535_4_10()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ClassName_558_4_11()) return true;
    if (jj_scan_token(29)) return true;
    if (jj_3R_MethodName_590_4_12()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TypeTag_614_4_13()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ParmNumber_658_4_14()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_CallBackType_501_4_9()) return true;
    return false;
  }

  static private boolean jj_3R_TypeTag_618_7_22()
 {
    if (jj_scan_token(ARGUMENT)) return true;
    return false;
  }

  static private boolean jj_3R_TypeTag_615_7_21()
 {
    if (jj_scan_token(LOCAL)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_FieldType_448_4_8()) return true;
    return false;
  }

  static private boolean jj_3R_ParameterType_289_4_5()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_EvalStatus_535_4_10()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ClassName_558_4_11()) return true;
    if (jj_scan_token(29)) return true;
    if (jj_3R_MethodName_590_4_12()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TypeTag_614_4_13()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ParmNumber_658_4_14()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_ArgumentType_395_4_7()) return true;
    return false;
  }

  static private boolean jj_3R_TypeTag_614_4_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeTag_615_7_21()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeTag_618_7_22()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeTag_621_7_23()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeTag_624_7_24()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeTag_627_7_25()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeTag_630_7_26()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_LocalType_236_4_4()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_EvalStatus_535_4_10()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ClassName_558_4_11()) return true;
    if (jj_scan_token(29)) return true;
    if (jj_3R_MethodName_590_4_12()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TypeTag_614_4_13()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ParmNumber_658_4_14()) return true;
    return false;
  }

  static private boolean jj_3R_ParmNumber_658_4_14()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_ClassName_560_7_20()
 {
    if (jj_3R_ClassNameRest_577_4_27()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_ReturnType_342_4_6()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EvaluatorTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x40,0x40000000,0x1c00000,0x0,0x3f0000,0xc000,0xc000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x2,0x0,0x0,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Evaluator(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Evaluator(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new EvaluatorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Evaluator(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new EvaluatorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new EvaluatorTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Evaluator(EvaluatorTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EvaluatorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[34];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 7; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 34; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 6; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
