options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(Evaluator)
  public class Evaluator {}
PARSER_END(Evaluator)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}


TOKEN :
{
  < LBRACKET: "<" >
| < RBRACKET: ">" >
| < LBRACES: "{" >
| < RBRACES: "}" >
| < COMMA: ",">
| < LPAREN: "(" >
| < RPAREN: ")" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : 
{
	< DONOTESCAPE: "D">
| 	< ESCAPE: "E">
|   < LOCAL: "local1">
|   < RETURN: "retrn">
|   < PARAMETER: "parmtr">
|   < ARGUMENT: "argmnt">
|   < FIELD: "field5">
|   < CALLBACK: "callback">
|   < STATIC : "Static">
|   < DYNAMIC : "Dynamic">
|   < SUPERD : "SuperD">
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/*************************************
 * The Evaluator Grammar Starts Here *
 *************************************/

void Goal() :
{}
{
  ( CompleteConditionalValues() )*
  <EOF>
}

void CompleteConditionalValues() :
{}
{
  ProgramElement() " = "  ( ConditionalValues() )*
}

void ProgramElement() :
{}
{
  "<"EvalStatus()","ClassName()":"MethodName()","TypeTag()","ParmNumber()"," FieldList()">"
}

void ConditionalValues() :
{}
{
 LOOKAHEAD(10)
 LocalType()
|
 LOOKAHEAD(10)
 ParameterType() 
|
 LOOKAHEAD(10)
 ReturnType()
|
 LOOKAHEAD(10)
 ArgumentType()
|
 LOOKAHEAD(10)
 FieldType()
|
 LOOKAHEAD(10)
 CallBackType()
}
void LocalType() :
{}
{
  "<<"EvalStatus()","ClassName()":"MethodName()","TypeTag()","ParmNumber()"," FieldList()">,"DependencyValue()","ResolvedValue()">;"
}

void ParameterType() :
{}
{
  "<<"EvalStatus()","ClassName()":"MethodName()","TypeTag()","ParmNumber()"," FieldList()">,"DependencyValue()","ResolvedValue()">;"
}

void ReturnType() :
{}
{
  "<<"EvalStatus()","ClassName()":"MethodName()"," TypeTag()","ParmNumber()"," FieldList()">,"DependencyValue()","ResolvedValue()">;"
}

void ArgumentType() :
{}
{
  "<<"EvalStatus()","ClassName()":"MethodName()","TypeTag()","ArgNumber()"," FieldList()">,"DependencyValue()","ResolvedValue()">;"
}

void FieldType() :
{}
{
  "<<"EvalStatus()","ClassName()":"MethodName()","TypeTag()","ArgNumber()"," FieldList()">,"DependencyValue()","ResolvedValue()">;"
}

void CallBackType() :
{}
{
  "<<"EvalStatus()","ClassName()":"MethodName()","TypeTag()","ArgNumber()"," FieldList()">,"DependencyValue()","ResolvedValue()">;"
}

void EvalStatus() :
{}
{
"Static"
|
"Dynamic"
|
"SuperD"
}
void ClassName() :
{}
{
	Identifier() ( ClassNameRest() )*
}

void ClassNameRest() :
{}
{
	"." Identifier()
}

void MethodName() :
{}
{
	Identifier()
}

void TypeTag() :
{}
{
 "local1"
|
 "argmnt"
|
 "parmtr"
|
 "retrn"
|
 "field5"
|
 "callback"
}

void ArgNumber() :
{}
{
	<INTEGER_LITERAL>
}

void ParmNumber() :
{}
{
	<INTEGER_LITERAL>
}

void FieldList() :
{}
{
	"<" Identifier() ">"
}

void Identifier() : 
{}
{
	<IDENTIFIER>
}

void DependencyValue() :
{}
{
  "D" 
|
  "E"
}

void ResolvedValue() :
{}
{
  "D" 
|
  "E"
}
