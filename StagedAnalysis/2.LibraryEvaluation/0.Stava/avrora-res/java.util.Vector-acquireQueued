<java.util.concurrent.locks.AbstractQueuedSynchronizer:acquireQueued,parmtr,1,<>> = <<java.util.concurrent.locks.AbstractQueuedSynchronizer:cancelAcquire,argmnt,1,<null>>,D,D>;<<java.util.concurrent.locks.AbstractQueuedSynchronizer:setHead,argmnt,1,<null>>,D,D>;<<java.util.concurrent.locks.AbstractQueuedSynchronizer:tryAcquire,argmnt,1,<null>>,D,D>;<<java.util.concurrent.locks.AbstractQueuedSynchronizer:parkAndCheckInterrupt,argmnt,1,<null>>,D,D>;<<java.util.concurrent.locks.AbstractQueuedSynchronizer:acquireQueued,argmnt,1,<null>>,D,D>;
<java.util.concurrent.locks.AbstractQueuedSynchronizer:acquireQueued,retrn,11,<>> = <<java.util.concurrent.locks.AbstractQueuedSynchronizer:acquireQueued,retrn,11,<null>>,D,D>;
<java.util.concurrent.locks.AbstractQueuedSynchronizer:acquireQueued,local1,1,<>> = <<java.util.concurrent.locks.AbstractQueuedSynchronizer:acquireQueued,local1,1,<null>>,E,E>;
<java.util.concurrent.locks.AbstractQueuedSynchronizer:acquireQueued,parmtr,2,<>> = <<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node:predecessor,argmnt,1,<null>>,D,D>;<<java.util.concurrent.locks.AbstractQueuedSynchronizer:shouldParkAfterFailedAcquire,argmnt,3,<null>>,D,D>;<<java.util.concurrent.locks.AbstractQueuedSynchronizer:setHead,argmnt,2,<null>>,D,D>;<<java.util.concurrent.locks.AbstractQueuedSynchronizer:acquireQueued,argmnt,2,<null>>,D,D>;<<java.util.concurrent.locks.AbstractQueuedSynchronizer:cancelAcquire,argmnt,2,<null>>,D,D>;
<java.util.concurrent.locks.AbstractQueuedSynchronizer:acquireQueued,local1,16,<>> = <<java.util.concurrent.locks.AbstractQueuedSynchronizer:acquireQueued,argmnt,1,<null>>,D,D>;
