//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "<"
 * f1 -> ClassName()
 * f2 -> ":"
 * f3 -> MethodName()
 * f4 -> ","
 * f5 -> TypeTag()
 * f6 -> ","
 * f7 -> ParmNumber()
 * f8 -> ","
 * f9 -> FieldList()
 * f10 -> ">"
 */
public class ProgramElement implements Node {
   public NodeToken f0;
   public ClassName f1;
   public NodeToken f2;
   public MethodName f3;
   public NodeToken f4;
   public TypeTag f5;
   public NodeToken f6;
   public ParmNumber f7;
   public NodeToken f8;
   public FieldList f9;
   public NodeToken f10;

   public ProgramElement(NodeToken n0, ClassName n1, NodeToken n2, MethodName n3, NodeToken n4, TypeTag n5, NodeToken n6, ParmNumber n7, NodeToken n8, FieldList n9, NodeToken n10) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
      f10 = n10;
   }

   public ProgramElement(ClassName n0, MethodName n1, TypeTag n2, ParmNumber n3, FieldList n4) {
      f0 = new NodeToken("<");
      f1 = n0;
      f2 = new NodeToken(":");
      f3 = n1;
      f4 = new NodeToken(",");
      f5 = n2;
      f6 = new NodeToken(",");
      f7 = n3;
      f8 = new NodeToken(",");
      f9 = n4;
      f10 = new NodeToken(">");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

