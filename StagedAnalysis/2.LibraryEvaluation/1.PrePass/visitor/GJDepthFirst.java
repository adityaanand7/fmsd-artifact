//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //
   
   String code = "";
   FileWriter fs = null;
   BufferedWriter bw = null;
   int count = 1;
   /**
    * f0 -> ( CompleteConditionalValues() )*
    * f1 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println(code);
      return _ret;
   }

   /**
    * f0 -> ProgramElement()
    * f1 -> " = "
    * f2 -> ( ConditionalValues() )*
    */
   public R visit(CompleteConditionalValues n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ParmNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">"
    */
   public R visit(ProgramElement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String classname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String methodname = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String typetag = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      String parmnumber = (String) n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      String fieldlist = (String) n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      if (classname.startsWith("java.") || classname.startsWith("jdk.") || classname.startsWith("sun.") || classname.startsWith("javax.") || classname.startsWith("com.sun.")
    		  || classname.startsWith("org.omg.") || classname.startsWith("org.xml.") || classname.startsWith("org.w3c.dom")) {
         if(count == 1) {
         	System.out.print("<Dynamic,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">> = ");
         	count++;
         } else {
         	System.out.print("\n<Dynamic,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">> = ");
         }
      } else {
    	  //System.out.print("\n<Static,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">> = ");
      }
      return _ret;
   }

   /**
    * f0 -> LocalType()
    *       | ParameterType()
    *       | ReturnType()
    *       | ArgumentType()
    *       | FieldType()
    */
   public R visit(ConditionalValues n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ParmNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(LocalType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String classname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String methodname = (String)  n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String typetag = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      String parmnumber = (String) n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      String fieldlist =  (String) n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String dependentvalue = (String) n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      String resolvedvalue = (String) n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      if (classname.startsWith("java.") || classname.startsWith("jdk.") || classname.startsWith("sun.") || classname.startsWith("javax.") || classname.startsWith("com.sun.")
    		  || classname.startsWith("org.omg.") || classname.startsWith("org.xml.") || classname.startsWith("org.w3c.dom")) {
         System.out.print( "<<Dynamic,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">>,"+dependentvalue+","+resolvedvalue+">;");
      } else {
         System.out.print( "<<Static,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">>,"+dependentvalue+","+resolvedvalue+">;");
      }
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ParmNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(ParameterType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String classname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String methodname = (String)  n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String typetag = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      String parmnumber = (String) n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      String fieldlist =  (String) n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String dependentvalue = (String) n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      String resolvedvalue = (String) n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      if (classname.startsWith("java.") || classname.startsWith("jdk.") || classname.startsWith("sun.") || classname.startsWith("javax.") || classname.startsWith("com.sun.")
              || classname.startsWith("org.omg.") || classname.startsWith("org.xml.") || classname.startsWith("org.w3c.dom")) {
         System.out.print( "<<Dynamic,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">>,"+dependentvalue+","+resolvedvalue+">;");
      } else {
         System.out.print( "<<Static,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">>,"+dependentvalue+","+resolvedvalue+">;");
      }
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ParmNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(ReturnType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String classname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String methodname = (String)  n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String typetag = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      String parmnumber = (String) n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      String fieldlist =  (String) n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String dependentvalue = (String) n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      String resolvedvalue = (String) n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      if (classname.startsWith("java.") || classname.startsWith("jdk.") || classname.startsWith("sun.") || classname.startsWith("javax.") || classname.startsWith("com.sun.")
              || classname.startsWith("org.omg.") || classname.startsWith("org.xml.") || classname.startsWith("org.w3c.dom")) {
         System.out.print( "<<Dynamic,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">>,"+dependentvalue+","+resolvedvalue+">;");
      } else {
         System.out.print( "<<Static,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">>,"+dependentvalue+","+resolvedvalue+">;");
      }
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ArgNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(ArgumentType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String classname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String methodname = (String)  n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String typetag = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      String parmnumber = (String) n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      String fieldlist =  (String) n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String dependentvalue = (String) n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      String resolvedvalue = (String) n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      if (classname.startsWith("java.") || classname.startsWith("jdk.") || classname.startsWith("sun.") || classname.startsWith("javax.") || classname.startsWith("com.sun.")
              || classname.startsWith("org.omg.") || classname.startsWith("org.xml.") || classname.startsWith("org.w3c.dom")) {
         System.out.print( "<<Dynamic,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">>,"+dependentvalue+","+resolvedvalue+">;");
      } else {
         System.out.print( "<<Static,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">>,"+dependentvalue+","+resolvedvalue+">;");
      }
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> ClassName()
    * f2 -> ":"
    * f3 -> MethodName()
    * f4 -> ","
    * f5 -> TypeTag()
    * f6 -> ","
    * f7 -> ArgNumber()
    * f8 -> ","
    * f9 -> FieldList()
    * f10 -> ">,"
    * f11 -> DependencyValue()
    * f12 -> ","
    * f13 -> ResolvedValue()
    * f14 -> ">;"
    */
   public R visit(FieldType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String classname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String methodname = (String)  n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String typetag = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      String parmnumber = (String) n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      String fieldlist =  (String) n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String dependentvalue = (String) n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      String resolvedvalue = (String) n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      if (classname.startsWith("java.") || classname.startsWith("jdk.") || classname.startsWith("sun.") || classname.startsWith("javax.") || classname.startsWith("com.sun.")
              || classname.startsWith("org.omg.") || classname.startsWith("org.xml.") || classname.startsWith("org.w3c.dom")) {
         System.out.print( "<<Dynamic,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">>,"+dependentvalue+","+resolvedvalue+">;");
      } else {
         System.out.print( "<<Static,"+classname+":"+methodname+","+typetag+","+parmnumber+",<"+fieldlist+">>,"+dependentvalue+","+resolvedvalue+">;");
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ClassNameRest() )*
    */
   public R visit(ClassName n, A argu) {
      R _ret=null;
      String className = (String) n.f0.accept(this, argu);
      for (Node i : n.f1.nodes) {
    	  className += "." + i.accept(this,argu);
      }
      return (R) className;
   }

   /**
    * f0 -> "."
    * f1 -> Identifier()
    */
   public R visit(ClassNameRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    */
   public R visit(MethodName n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "local1"
    *       | "argmnt"
    *       | "parmtr"
    *       | "retrn"
    *       | "field5"
    */
   public R visit(TypeTag n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.choice.toString();
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(ArgNumber n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(ParmNumber n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "<"
    * f1 -> ( Identifier() )*
    * f2 -> ">"
    */
   public R visit(FieldList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "D"
    *       | "E"
    */
   public R visit(DependencyValue n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.choice.toString();
      return _ret;
   }

   /**
    * f0 -> "D"
    *       | "E"
    */
   public R visit(ResolvedValue n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.choice.toString();
      return _ret;
   }

}
