//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import javax.swing.plaf.synth.SynthTextAreaUI;
import java.util.*;
import java.io.*;
import java.io.File;
import java.util.Map.Entry;


/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   // *****************************************
   // ******** My code starts from here *******
   // *****************************************

   String eval_res = "D";
   boolean partial_flag = false;
   boolean debug = false;
   static final boolean ISAMP2 = true;
   // Class for storing the dependency values.
   enum Estatus { Static, Dynamic}
   enum Ttag {local1, parmtr, argmnt, field5, retrn}
   enum DEval {D ,E ,N}
   public class PE {
      Estatus EvalStatus;
      String ClassName;
      String MethodName;
      Ttag TypeTag;
      int ParmNumber;
      String FieldList;
      public String toString() {
         return "<" + EvalStatus.name() + "," + ClassName + ":" + MethodName + "," + TypeTag.name() + "," + ParmNumber + "<" + FieldList + ">>";
      }

      @Override
      public int hashCode() {
         return EvalStatus.hashCode() + 17 * ClassName.hashCode() +
                 17 * MethodName.hashCode() + 17 * TypeTag.hashCode()+
                 17 * ParmNumber + FieldList.hashCode();
      }

      @Override
      public boolean equals(Object other) {
         PE p = (PE) other;
         return (EvalStatus == p.EvalStatus && TypeTag == p.TypeTag && ParmNumber == p.ParmNumber
                 && ClassName.equals(p.ClassName)
                 && MethodName.equals(p.MethodName)
                 && FieldList.equals(p.FieldList));
      }
   }
   // Class for storing the dependency
   public class Dependency {
      PE p = new PE();
      DEval DependencyValue;
      DEval ResolvedValue;

      public String toString() {
         return p + "," + DependencyValue.name() + "," + ResolvedValue.name() + ">";
      }
      @Override
      public int hashCode() {
         return p.hashCode() + 17 * DependencyValue.hashCode()
                 + 17 * ResolvedValue.hashCode();
      }

      @Override
      public boolean equals(Object other) {
         Dependency d = (Dependency) other;
         return (p.equals(d.p) && DependencyValue == d.DependencyValue && ResolvedValue == d.ResolvedValue);
      }
   }
   // Class for storing the conditional values.
   public class CV {
      Set<Dependency> dep = new HashSet<Dependency>();
   };
   // Map to store all the conditional values.
   Map<PE, CV> InputCV = new HashMap<>();
   // Create a CV object
   public CV createCV(){
      CV a = new CV();
      a.dep = new HashSet<Dependency>();
      return a;
   }
   public class SCC {
      List<Integer> sccmap = new ArrayList<>();
      List<PE> sccpemap = new ArrayList<>();
   }
   Map<Integer,SCC>sccmapping = new HashMap<>();
   Map<Integer,SCC>sccpemapping = new HashMap<>();
   Map<PE, CV> transmap = new HashMap<>();
   public boolean comparehashmaps (Map<Dependency, DEval> map1, Map<Dependency, DEval> map2) {
      if (map1 == null || map2 == null)
         return false;
      for (Dependency ch1 : map1.keySet()) {
         try {
            if (map1.get(ch1) != map2.get(ch1))
               return false;
         } catch (Exception e) {}
      }
      for (Dependency ch2 : map2.keySet()) {
         try {
            if (map2.get(ch2) != map1.get(ch2))
               return false;
         } catch (Exception e) {}
      }
      return true;
   }

   public CV getdep (Map<PE, CV> map, Dependency d1) {
      CV cobj = new CV();
      for (PE p1 : map.keySet()) {
//         System.out.println(" PE val: <<" + p1.EvalStatus + "," + p1.ClassName + ":" +
//                 p1.MethodName + "," + p1.TypeTag + "," + p1.ParmNumber + ",<" + p1.FieldList + ">>");
         if( p1.ClassName.equals(d1.p.ClassName)
                 && p1.MethodName.equals(d1.p.MethodName)
                 && p1.TypeTag == (d1.p.TypeTag)
                 && p1.ParmNumber == (d1.p.ParmNumber)) {
            //System.out.println("True");
            for (Dependency d2 : map.get(p1).dep) {
               cobj.dep.add(d2);
               //  System.out.println("D2 : "+ d2.p.ClassName);
            }
         }
      }
      return cobj;
   }

   public DEval getValue (Map<Dependency, DEval> m, Dependency d) {
      return m.get(d);
   }

   public boolean worklistcontains (Map<Dependency,String> wl, Dependency d) {
      return wl.containsKey(d);
   }

   class Graph<T> {
      // No. of vertices
      private int V;
      //Adjacency Lists
      private LinkedList<Integer> adj[];
      private int Time;

      // Constructor
      @SuppressWarnings("unchecked")
      Graph(int v)
      {
         V = v;
         adj = new LinkedList[v];

         for(int i = 0; i < v; ++i)
            adj[i] = new LinkedList();

         Time = 0;
      }

      // Function to add an edge into the graph
      void addEdge(int v,int w)
      {
         adj[v].add(w);
      }

      void SCCUtil(int u, int low[], int disc[], boolean stackMember[], Stack<Integer> st) {
         //System.out.println("Turn 1");
         int temp = u+1;
         disc[u] = Time;
         low[u] = Time;
         Time += 1;
         stackMember[u] = true;
         st.push(u);
         int n;
         // Go through all vertices adjacent to this
         try {
            Iterator<Integer> i = adj[u].iterator();
            while (i.hasNext()) {
               n = i.next();
               if (disc[n] == -1) {
                  SCCUtil(n, low, disc, stackMember, st);
                  low[u] = Math.min(low[u], low[n]);
               } else if (stackMember[n] == true) {
                  low[u] = Math.min(low[u], disc[n]);
               }
            }
         } catch (Exception e) {}
         int w = -1;
         //System.out.println("U value :" + u +  "low[u] : "+ low[u] + "disc[u] : "+ disc[u]);
         if (low[u] == disc[u]) {
            SCC s1 = new SCC();
            while (w != u)
            {
               w = (int)st.pop();
               //System.out.print(w + " ");
               s1.sccmap.add(w);
               stackMember[w] = false;
            }
            sccmapping.put(temp,s1);
            //System.out.println();
         }
      }

      void SCC()
      {
         int disc[] = new int[V];
         int low[] = new int[V];
         for(int i = 0;i < V; i++) {
            disc[i] = -1;
            low[i] = -1;
         }

         boolean stackMember[] = new boolean[V];
         Stack<Integer> st = new Stack<Integer>();
         for(int i = 0; i < V; i++) {
            if (disc[i] == -1)
               SCCUtil(i, low, disc, stackMember, st);
         }
      }
   }

   int i =0;
   public void Fixpointalgo (Map<PE, CV> parCV) {
//      Map<Dependency, String> worklist = new HashMap<>();
//      Map<Dependency, String> worklistold = new HashMap<>();
//      Map<Dependency, String> tempworklistnew = new HashMap<>();
      Map<Dependency, String> res = new HashMap<>();
      Map<Dependency, DEval> resolvedValue= new HashMap<>();
      // Debug Code : Checking after receiving the pararmeters
      if(debug) {
         System.out.println(" After receiving ");
         System.out.println(" * * * * * * All the CV's * * * * * *");
         int count = 1;
         for (PE p1 : parCV.keySet()) {
            System.out.println(count++ + " Program Element : <"+ p1.EvalStatus + ","+ p1.ClassName + ":"
                    + p1.MethodName + "," + p1.TypeTag + "," + p1.ParmNumber + ",<" + p1.FieldList + ">>");
            for (Dependency d1 : parCV.get(p1).dep) {
               System.out.println(" Dependency : <<" + d1.p.EvalStatus + "," +d1.p.ClassName + ":" +
                       d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>,"+
                       d1.DependencyValue + ","+ d1.ResolvedValue+ ">;");
            }
         }
      }
      if(ISAMP2) {
         for (PE ptemp : parCV.keySet()) {
            Map<Dependency, DEval> worklist = new HashMap<>();
            Map<Dependency, DEval> worklistold = new HashMap<>();
            Map<Dependency, DEval> tempworklistnew = new HashMap<>();
            //System.out.println("PE taken : "+ ptemp);
            CV ctemp = new CV();
            int oldsize = ctemp.dep.size();
            for (Dependency d1 : parCV.get(ptemp).dep) {
               ctemp.dep.add(d1);
               if (!worklist.containsKey(d1)) {
                  //System.out.println("Dependency added in worklist : "+ d1);
                  if(resolvedValue.containsKey(d1)) {
                     worklist.put(d1, resolvedValue.get(d1));
                     tempworklistnew.put(d1, resolvedValue.get(d1));
                  } else {
                     worklist.put(d1, DEval.N);
                     tempworklistnew.put(d1, DEval.N);
                  }

               }
            }
//            if(ptemp.ParmNumber.equals("2359")) {
//               //System.out.println("Ctemp value: "+ ctemp.dep);
//               for (Dependency d1 : worklist.keySet()) {
//                  System.out.println("Worklist contains : " + d1.p.EvalStatus + "," + d1.p.ClassName + ":" +
//                          d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>," +
//                          d1.DependencyValue + "," + d1.ResolvedValue + ">;");
//               }
//            }
            while ((ctemp.dep.size() > oldsize) || !(comparehashmaps(worklist, worklistold))) {
               oldsize = ctemp.dep.size();
               //System.out.println("Entered");
               // Copy the worklist to the new worklist for comprison
               //System.out.println("------------");
//               if (ptemp.ParmNumber.equals("2359")) {
//                  System.out.println("1. Reaching inside local");
//               }
               for (Dependency ch1 : worklist.keySet()) {
                  //System.out.println("Worlist values : "+ ch1.p.ClassName + ch1.p.MethodName +ch1.p.TypeTag  + " "+ ch1.p.EvalStatus + " "+ worklist.get(ch1));
                  worklistold.put(ch1, worklist.get(ch1));
               }
               //         for (Dependency ch1 : worklistold.keySet()) {
               //            System.out.println("Worlistnew values 2 : "+ ch1.p.ClassName + ch1.p.MethodName +ch1.p.TypeTag  + " "+ worklist.get(ch1));
               //         }
               //System.out.println(" Worklist for " +ptemp+ " -- >" + worklist);
               for (Dependency d1 : worklist.keySet()) {
                  CV tmp = new CV();
//                  if (ptemp.ParmNumber.equals("2359")) {
//                     System.out.println("2. Reaching inside local");
//                  }

                  if (true) {
                     //System.out.println("Current Dependency 1 :"+ d1.p.ClassName + " ---> " + d1.p.MethodName + " " + d1.p.EvalStatus + " " + d1.p.TypeTag + " " + d1.p.ParmNumber);
//                     if (ptemp.ParmNumber.equals("2359")) {
//                        System.out.println("3. Reaching inside local");
//                     }
                     if (d1.p.TypeTag == Ttag.local1) {
                        //System.out.println("Current Dependency 2:"+ d1.p.ClassName + " ---> " + d1.p.MethodName + " " + d1.p.EvalStatus + " " + d1.p.TypeTag + " " + d1.p.ParmNumber);
                        tmp = getdep(parCV, d1);
                        for (Dependency d : tmp.dep) {
                           if (ctemp.dep.contains(d1)) {
                              ctemp.dep.add(d);
                           }
                           //System.out.println("Dependency in local "+ d.p.ClassName + " " + d.p.MethodName + " "+ d.p.TypeTag);
                           if (d.equals(d1)) {
                              //System.out.println("Entered 1 local for : " + d.p.ClassName + " "+ d.p.MethodName);
                              tempworklistnew.put(d1, d.ResolvedValue);
                           } else if (!tempworklistnew.containsKey(d)) {
                              // Add the new dependency in the worklist
                              //tempworklistnew.put(d, "null");
                              if(resolvedValue.containsKey(d)) {
                                 tempworklistnew.put(d, resolvedValue.get(d));
                              } else {
                                 tempworklistnew.put(d, DEval.N);
                              }
                           } else if (tempworklistnew.containsKey(d)) {
                              try {
                                 if (getValue(tempworklistnew, d) == DEval.N) {
                                    continue;
                                 } else if (getValue(tempworklistnew, d) == DEval.D) {
                                    if (getValue(tempworklistnew, d1) == DEval.N) {
                                       if (d1.ResolvedValue == DEval.D) {
                                          tempworklistnew.put(d1, DEval.D);
                                       } else {
                                          tempworklistnew.put(d1, DEval.E);
                                       }
                                    } else if (getValue(tempworklistnew, d1) == DEval.E) {
                                       tempworklistnew.put(d1, DEval.E);
                                    }
                                 }
                              } catch (Exception e) {
                                 System.out.println("Exception caused 2" + e + "due to :" + d.p.ClassName + " " + d.p.MethodName + " " + d.p.TypeTag + " " + d.p.ParmNumber);
                              }
                           }
                        }
                     } else if (d1.p.TypeTag == Ttag.argmnt) {
                        boolean flag = false;
//                        if (ptemp.ParmNumber.equals("2359")) {
//                           System.out.println("Depen : "+ d1);
//                           System.out.println("Reaching here 2359");
//
//                        }
                        //System.out.println("Reaching here");
                        for (PE p1 : parCV.keySet()) {
                           flag = false;
                           if (p1.TypeTag == Ttag.parmtr
                                   && d1.p.ParmNumber == (p1.ParmNumber)
                                   && d1.p.ClassName.equals(p1.ClassName)
                                   && d1.p.MethodName.equals(p1.MethodName)) {
                              flag = true;
                           }
                           try {
                              if (flag) {
                                 for (Dependency tmpd1 : parCV.get(p1).dep) {
//                                    if (p1.ClassName.equals("init") && p1.TypeTag.equals("parm") && p1.ParmNumber.equals("10")) {
//                                       System.out.println("Reaching here");
//                                    }
                                    //System.out.println("Reaching here");
                                    if (ctemp.dep.contains(d1)) {
                                       ctemp.dep.add(tmpd1);
                                    }
                                    if (!tempworklistnew.containsKey(tmpd1)) {
                                       //tempworklistnew.put(tmpd1, "null");
                                       if(resolvedValue.containsKey(tmpd1)) {
                                          tempworklistnew.put(tmpd1, resolvedValue.get(tmpd1));
                                       } else {
                                          tempworklistnew.put(tmpd1, DEval.N);
                                       }

                                    } else if (tmpd1.ResolvedValue != DEval.N) {
                                       if (tempworklistnew.get(tmpd1) == DEval.E) {
                                          tempworklistnew.put(d1, DEval.E);
                                       } else if (tempworklistnew.get(tmpd1) == DEval.D) {
                                          if (d1.ResolvedValue == DEval.D) {
                                             tempworklistnew.put(d1, DEval.D);
                                          } else {
                                             tempworklistnew.put(d1, DEval.E);
                                          }
                                       }
                                    }

                                 }
                              }
                           } catch (Exception e) {
                           }
                        }
                     } else if (d1.p.TypeTag == Ttag.parmtr) {
                        tmp = getdep(parCV, d1);
                        for (Dependency d : tmp.dep) {
                           if (ctemp.dep.contains(d1)) {
                              ctemp.dep.add(d);
                           }
                           //System.out.println("Reaching here");
                           if (d.p.TypeTag ==  d1.p.TypeTag
                                   && d.p.ParmNumber == d1.p.ParmNumber
                                   && d.p.ClassName.equals(d1.p.ClassName)
                                   && d.p.MethodName.equals(d1.p.MethodName)) {
                              tempworklistnew.put(d1, d.ResolvedValue);
                              //System.out.println("Entered 1 arg for : " + d.p.ClassName + " "+ d.p.MethodName);
                           } else if (!tempworklistnew.containsKey(d)) {
                              //tempworklistnew.put(d, "null");
                              if(resolvedValue.containsKey(d)) {
                                 tempworklistnew.put(d, resolvedValue.get(d));
                              } else {
                                 tempworklistnew.put(d, DEval.N);
                              }

                              //System.out.println("Entered 2 arg for : "+ d.p.ClassName + " "+ d.p.MethodName);
                           }
                        }
                        boolean flag = false;
                        for (PE p1 : parCV.keySet()) {
                           flag = false;
                           for (Dependency tmpd1 : parCV.get(p1).dep) {
                              if ( tmpd1.p.TypeTag == Ttag.argmnt
                                      && tmpd1.p.ParmNumber == d1.p.ParmNumber
                                      && tmpd1.p.ClassName.equals(d1.p.ClassName)
                                      && tmpd1.p.MethodName.equals(d1.p.MethodName)) {
                                 flag = true;
                                 break;
                              }
                           }
                           if (flag) {
                              for (Dependency tmpd1 : parCV.get(p1).dep) {
                                 if (ctemp.dep.contains(d1)) {
                                    ctemp.dep.add(tmpd1);
                                 }
                                 if (tmpd1.p.TypeTag == Ttag.argmnt
                                         && tmpd1.p.ParmNumber == d1.p.ParmNumber
                                         &&tmpd1.p.ClassName.equals(d1.p.ClassName)
                                         && tmpd1.p.MethodName.equals(d1.p.MethodName)) {
                                    continue;
                                 } else if (!tempworklistnew.containsKey(tmpd1)) {
                                    //tempworklistnew.put(tmpd1, "null");
                                    if(resolvedValue.containsKey(tmpd1)) {
                                       tempworklistnew.put(tmpd1, resolvedValue.get(tmpd1));
                                    } else {
                                       tempworklistnew.put(tmpd1, DEval.N);
                                    }
                                 }
                              }
                           }
                        }
                     } else if (d1.p.TypeTag == Ttag.field5) {
                        tmp = getdep(parCV, d1);
                        for (Dependency d : tmp.dep) {
                           if (ctemp.dep.contains(d1)) {
                              ctemp.dep.add(d);
                           }
                           if (d.equals(d1)) {
                              tempworklistnew.put(d1, d.ResolvedValue);
                              //System.out.println("Entered 1 arg for : " + d.p.ClassName + " "+ d.p.MethodName);
                           } else if (!tempworklistnew.containsKey(d)) {
                              //tempworklistnew.put(d, "null");
                              if(resolvedValue.containsKey(d)) {
                                 tempworklistnew.put(d, resolvedValue.get(d));
                              } else {
                                 tempworklistnew.put(d, DEval.N);
                              }

                              //System.out.println("Entered 2 arg for : "+ d.p.ClassName + " "+ d.p.MethodName);
                           } else if (d.ResolvedValue != DEval.N) {
                              if (tempworklistnew.get(d1) == DEval.N) {
                                 tempworklistnew.put(d1, d.ResolvedValue);
                              } else if (tempworklistnew.get(d1) == DEval.E) {
                                 tempworklistnew.put(d1, DEval.E);
                              } else if (tempworklistnew.get(d1) == DEval.D) {
                                 if (d1.ResolvedValue == DEval.D) {
                                    tempworklistnew.put(d1, DEval.D);
                                 } else {
                                    tempworklistnew.put(d1, DEval.E);
                                 }
                              }
                           }
                        }
                     } else if (d1.p.TypeTag == Ttag.retrn) {
                        //                  System.out.println("********** Reached Here *******");
                        //                  System.out.println("Entered return for : " + d1.p.ClassName + " "+ d1.p.MethodName + " " + d1.p.TypeTag);
                        tmp = getdep(parCV, d1);
                        for (Dependency d : tmp.dep) {
                           if (ctemp.dep.contains(d1)) {
                              ctemp.dep.add(d);
                           }
                           if (d.equals(d1)) {
                              //                        System.out.println("Entered 1 return for : " + d.p.ClassName + " "+ d.p.MethodName);
                              tempworklistnew.put(d1, d.ResolvedValue);
                           } else if (!tempworklistnew.containsKey(d)) {
                              //Add the new dependency in the worklist
                              //tempworklistnew.put(d, "null");
                              if(resolvedValue.containsKey(d)) {
                                 tempworklistnew.put(d, resolvedValue.get(d));
                              } else {
                                 tempworklistnew.put(d, DEval.N);
                              }

                           } else if (tempworklistnew.containsKey(d)) {
                              try {
                                 if (getValue(tempworklistnew, d) == DEval.N) {
                                    continue;
                                 } else if (getValue(tempworklistnew, d) == DEval.D) {
                                    if (getValue(tempworklistnew, d1) == DEval.N) {
                                       if (d1.ResolvedValue == DEval.D) {
                                          tempworklistnew.put(d1, DEval.D);
                                       } else {
                                          tempworklistnew.put(d1, DEval.E);
                                       }
                                    } else if (getValue(tempworklistnew, d1) == DEval.E) {
                                       tempworklistnew.put(d1, DEval.E);
                                    }
                                 }
                              } catch (Exception e) {
                                 System.out.println("Exception caused 2" + e + "due to :" + d.p.ClassName + " " + d.p.MethodName + " " + d.p.TypeTag + " " + d.p.ParmNumber);
                              }
                           }
                        }
                     }
                  }
               }
               // Copy all the values
               for (Dependency ch1 : tempworklistnew.keySet()) {
                  //System.out.println("Worlist values : "+ worklist.get(ch1));
                  worklist.put(ch1, tempworklistnew.get(ch1));
               }
            }
//            for (Dependency c : ctemp.dep) {
//               if (ptemp.ParmNumber.equals("2359")) {
//                  System.out.println("Dependency in ctemp: " + c);
//               }
//            }
//            if(ptemp.ParmNumber.equals("2359")) {
//               System.out.println("Ctemp value: " + ctemp.dep);
//            }
            transmap.put(ptemp, ctemp);
//            CV ctemp2 = new CV();
//            for(Dependency d : ctemp.dep){
//               ctemp2.dep.add(d);
//            }
//            transmap.put(ptemp,ctemp2);

            //
            //         System.out.println("At End Both Worklist "+ i++);
            //         for (Dependency ch1 : worklist.keySet()) {
            //            System.out.println("Worlist values 1 : "+ ch1.p.ClassName + ch1.p.MethodName +ch1.p.TypeTag  + " "+ ch1.p.ParmNumber +" "+ worklist.get(ch1));
            //         }
            //         for (Dependency ch1 : worklistold.keySet()) {
            //            System.out.println("Worlistnew values 2 : "+ ch1.p.ClassName + ch1.p.MethodName +ch1.p.TypeTag  + " "+ ch1.p.ParmNumber + " "+ worklistold.get(ch1));
            //         }
            //         System.out.println("***************************");
            // Check for Cyclic Dependency
            //1. Convert the data structure to Graph

            int count = 0;
            List<PE> tmp = new ArrayList<PE>();
            Map<PE, Integer> mapping = new HashMap<PE, Integer>();
            // Copy for comparison
            int i = 0;
            for (PE p1 : parCV.keySet()) {
               tmp.add(p1);
               count++;
               mapping.put(p1, i++);
            }
            //      for (PE p : mapping.keySet()) {
            //         System.out.println("Maping value : "+ p.ClassName + ":" + p.MethodName+ ","+ p.ParmNumber + "-->"+ mapping.get(p));
            //      }
            Graph g = new Graph(count);
            for (PE p1 : parCV.keySet()) {
               for (Dependency d3 : parCV.get(p1).dep) {
                  for (PE p2 : tmp) {
                     if (p2.ClassName.equals(d3.p.ClassName)
                             && p2.MethodName.equals(d3.p.MethodName)
                             && (p2.TypeTag == d3.p.TypeTag) || p2.TypeTag == Ttag.argmnt && d3.p.TypeTag == Ttag.parmtr || p2.TypeTag == Ttag.parmtr && d3.p.TypeTag == Ttag.argmnt
                             && p2.ParmNumber == d3.p.ParmNumber) {
                        //System.out.println("P1 : "+ p1.ClassName+ ":" + p1.MethodName +","+ p1.TypeTag + "--> P2: "+ p2.ClassName + ":"+ p2.MethodName + ","+ p2.TypeTag + " Mapping :"+ mapping.get(p1) + "-->" + mapping.get(p2)) ;

                        g.addEdge(mapping.get(p1), mapping.get(p2));
                        int x = mapping.get(p1);
                        int y = mapping.get(p2);
                        g.adj[x].add(y);
                     }
                  }
               }
            }

            // 2. Apply Trajan's Algo for getting the SCC from Graph
            //System.out.println("Graph:\n" + g.toString());
            //System.out.println("Count: "+ count);
            g.V = count;
            g.SCC();
            for (Integer i1 : sccmapping.keySet()) {
               SCC s1 = new SCC();
               //System.out.println("SCC : "+ i1);
               for (Integer j1 : sccmapping.get(i1).sccmap) {
                  //System.out.println("Val :"+ j1);
                  for (Entry<PE, Integer> pt : mapping.entrySet()) {
                     if (pt.getValue() == j1) {
                        s1.sccpemap.add(pt.getKey());
                        break;
                     }
                  }
               }
               sccpemapping.put(i1, s1);
            }

            for (Integer itemp2 : sccpemapping.keySet()) {
               int counter;
               boolean flag = false;
               //System.out.println(" MAPPED SCC : "+ itemp2);
               for (PE jtemp2 : sccpemapping.get(itemp2).sccpemap) {
                  counter = 0;
                  for (PE pt : parCV.keySet()) {
                     if (  jtemp2.TypeTag == pt.TypeTag
                             && jtemp2.ParmNumber == pt.ParmNumber
                             && jtemp2.ClassName.equals(pt.ClassName)
                             && jtemp2.MethodName.equals(pt.MethodName)) {
                        for (Dependency d4 : parCV.get(pt).dep) {
                           counter++;
                        }
                     }
                     if (counter > 1) {
                        flag = true;
                     }
                  }
                  //System.out.println("Values : "+ jtemp2.ClassName +" "+ jtemp2.MethodName + " " + jtemp2.ParmNumber + " " + jtemp2.TypeTag );
               }
               if (!flag) {
                  for (PE jtemp3 : sccpemapping.get(itemp2).sccpemap) {
                     for (Dependency dtemp : worklist.keySet()) {
                        if (worklist.get(dtemp) == DEval.N) {
                           worklist.put(dtemp, DEval.D);
                        }
                     }

                  }
               }
            }
            //System.out.println(" Program element : "+  ptemp );
            for(Dependency d: worklist.keySet()){
               //System.out.println("Dependency : "+ d + " value --> "+ worklist.get(d));
               resolvedValue.put(d,worklist.get(d));
            }
            boolean flag = true;
            boolean dflag = false;
            boolean pflag = false;
            String result = "";
            int count1 = 0;
            for(Dependency dtemp: worklist.keySet()){
               if (worklist.get(dtemp) == DEval.E) {
                  //System.out.println("Reaching inside E");
                  System.out.println("<" + ptemp.EvalStatus + "," + ptemp.ClassName + ":"
                          + ptemp.MethodName + "," + ptemp.TypeTag + "," + ptemp.ParmNumber + ",<" + ptemp.FieldList + ">> = E");
                  flag = false;
                  break;
               } else if (worklist.get(dtemp) == DEval.D) {
                  //System.out.println("Raeching here inside D");
                  if (count1 == 0) {
                     if(result.equals("")) {
                        result += "D";
                     } else {
                        if(pflag) {
                           continue;
                        } else {
                           result = "D ^ " + result;
                           dflag = true;
                        }
                     }
                     count1++;
                  }
               } else if (worklist.get(dtemp) == DEval.N) {
                  //System.out.println("Raeched inside null");
                  if (result.equals("")) {
                     if(worklist.keySet().size() == 1) {
                        result = "<<" + dtemp.p.EvalStatus + "," + dtemp.p.ClassName + ":" +
                                dtemp.p.MethodName + "," + dtemp.p.TypeTag + "," + dtemp.p.ParmNumber + "<" + dtemp.p.FieldList + ">>," +
                                dtemp.DependencyValue + "," + dtemp.ResolvedValue + ">;";
                     } else {
                        //System.out.println("Came here ");
                        if(dflag) {
                           result = "<<" + dtemp.p.EvalStatus + "," + dtemp.p.ClassName + ":" +
                                   dtemp.p.MethodName + "," + dtemp.p.TypeTag + "," + dtemp.p.ParmNumber + "<" + dtemp.p.FieldList + ">>," +
                                   dtemp.DependencyValue + "," + dtemp.ResolvedValue + ">;";

                        } else {
                           result = "D ^ <<" + dtemp.p.EvalStatus + "," + dtemp.p.ClassName + ":" +
                                   dtemp.p.MethodName + "," + dtemp.p.TypeTag + "," + dtemp.p.ParmNumber + "<" + dtemp.p.FieldList + ">>," +
                                   dtemp.DependencyValue + "," + dtemp.ResolvedValue + ">;";
                           pflag = true;
                        }
                     }
                  } else {
                     result = result + " ^ <<" + dtemp.p.EvalStatus + "," + dtemp.p.ClassName + ":" +
                             dtemp.p.MethodName + "," + dtemp.p.TypeTag + "," + dtemp.p.ParmNumber + "<" + dtemp.p.FieldList + ">>," +
                             dtemp.DependencyValue + "," + dtemp.ResolvedValue + ">;";
                  }
               }
            }
            if(flag){
               System.out.println(ptemp + " = " + result);
            }
         }
      }
   }
//   public void Evaluate (Map<PE, CV> parCV, PE pobj, Map<Dependency,String> mp1) {
//      //System.out.println("Mp1 values "+ mp1);
//      int count = 0;
//      for (PE p1 : parCV.keySet()) {
//         //System.out.println("For element : "+ p1);
////         System.out.println(count++ + " Program Element : <" + p1.EvalStatus + "," + p1.ClassName + ":"
////                 + p1.MethodName + "," + p1.TypeTag + "," + p1.ParmNumber + ",<" + p1.FieldList + ">>");
//         boolean flag = true;
//         List<String> result = new ArrayList<>();
//         String res = "";
//         int count1 = 0;
//         for (Dependency d1 : parCV.get(p1).dep) {
////            if(p1.ParmNumber.equals("2359")){
////               System.out.println(" Dependency : " + d1  + " Mp1 get : "+ mp1.get(d1));
////               System.out.println("Res : "+ res);
////            }
//
//
//                  //System.out.println("Dependency :"+ d.p.ClassName + " "+ d.p.MethodName + " "+ d.p.EvalStatus + " "+ mp1.get(d));
//                  //System.out.println(mp1);
//                  //System.out.println("MP1 value : "+ (mp1.get(d1) == null));
//                  if (mp1.get(d1).equals("E")) {
//                     //System.out.println("Reaching inside E");
//                     System.out.println("<" + p1.EvalStatus + "," + p1.ClassName + ":"
//                                     + p1.MethodName + "," + p1.TypeTag + "," + p1.ParmNumber + ",<" + p1.FieldList + ">> = E");
//                     flag = false;
//                     break;
//                  } else if (mp1.get(d1).equals("D")) {
//                     //System.out.println("Raeching here inside D");
//                     if (count1 == 0) {
//                        res += "D";
//                        count1++;
//                     }
//                  } else if (mp1.get(d1).equals("null")) {
//                     //System.out.println("Raeched inside null");
//                     if(res.equals("")){
//                        res = "<<" + d1.p.EvalStatus + "," + d1.p.ClassName + ":" +
//                                d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>," +
//                                d1.DependencyValue + "," + d1.ResolvedValue + ">;";
//                     } else {
//                        //System.out.println("Came here ");
//                        res = res + " ^ <<" + d1.p.EvalStatus + "," + d1.p.ClassName + ":" +
//                                d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>," +
//                                d1.DependencyValue + "," + d1.ResolvedValue + ">;";
//                     }
//                     //result.add(res);
//                  } else {
//                     res = "<<" + d1.p.EvalStatus + "," + d1.p.ClassName + ":" +
//                             d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>," +
//                             d1.DependencyValue + "," + d1.ResolvedValue + ">;";
//                  }
//         }
//         //System.out.println("Res2 : "+ res);
//         if (flag) {
//            System.out.print("<" + p1.EvalStatus + "," + p1.ClassName + ":"
//                    + p1.MethodName + "," + p1.TypeTag + "," + p1.ParmNumber + ",<" + p1.FieldList + ">> = "+ res);
////            int count1 =0;
////            for (String s : result) {
////               if (count1 == 0) {
////                  System.out.print(s);
////                  count1++;
////               } else {
////                  System.out.print(" ^ " + s);
////               }
////            }
//            System.out.println();
//         }
//         //System.out.println("============");
//      }
//   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( CompleteConditionalValues() )*
    * f1 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      // Debug Code : Checking after reading the Input pool of Conditional Values
//      if(debug) {
//         System.out.println(" All the CV's ");
//         for (PE p1 : InputCV.keySet()) {
//            System.out.println(" Program Element : <"+ p1.EvalStatus + ","+ p1.ClassName + ":"
//                    + p1.MethodName + "," + p1.TypeTag + "," + p1.ParmNumber + ",<" + p1.FieldList + ">>");
//            for (Dependency d1 : InputCV.get(p1).dep) {
//               System.out.println(" Dependency : <<" + d1.p.EvalStatus + "," +d1.p.ClassName + ":" +
//                       d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>,"+
//                       d1.DependencyValue + ","+ d1.ResolvedValue+ ">;");
//            }
//         }
//      }
//      PE pobj = new PE();
//      CV cvobj = createCV();
//      // Reading the Input File (Storing for the object which need to be actually evaluated)
//      try {
//         int flag = 1;
//         String estatus = "";
//         String cname = "";
//         String mname = "";
//         String ttype = "";
//         String pnumber = "";
//         String flist = "";
//         String dvalue = "";
//         String rvalue = "";
//
//         Scanner s = new Scanner(new File("CV.txt"));
//         String dep = s.nextLine();
//         StringTokenizer multiTokenizer = new StringTokenizer(dep, "<<,>,>;=: ");
//
//         pobj.EvalStatus = multiTokenizer.nextToken();
//         pobj.ClassName = multiTokenizer.nextToken();
//         pobj.MethodName = multiTokenizer.nextToken();
//         pobj.TypeTag = multiTokenizer.nextToken();
//         pobj.ParmNumber = multiTokenizer.nextToken();
//         pobj.FieldList = multiTokenizer.nextToken();
//         while (multiTokenizer.hasMoreTokens()) {
//            //System.out.println("Value Stored1 :" + multiTokenizer.nextToken());
//            if (flag == 1) {
//               estatus = multiTokenizer.nextToken();
//               flag++;
//            }
//            else if (flag == 2) {
//               cname = multiTokenizer.nextToken();
//               flag++;
//            }
//            else if(flag == 3) {
//               mname = multiTokenizer.nextToken();
//               flag++;
//            }
//            else if(flag == 4) {
//               ttype = multiTokenizer.nextToken();
//               flag++;
//            }
//            else if(flag == 5) {
//               pnumber = multiTokenizer.nextToken();
//               flag++;
//            }
//            else if(flag == 6) {
//               flist = multiTokenizer.nextToken();
//               flag++;
//            }
//            else if(flag == 7) {
//               dvalue = multiTokenizer.nextToken();
//               flag++;
//            }
//            else if(flag == 8) {
//               rvalue = multiTokenizer.nextToken();
//               flag = 1;
//               Dependency dtemp = new Dependency();
//               dtemp.p.EvalStatus = estatus;
//               dtemp.p.ClassName = cname;
//               dtemp.p.MethodName = mname;
//               dtemp.p.TypeTag = ttype;
//               dtemp.p.ParmNumber = pnumber;
//               dtemp.p.FieldList = flist;
//               dtemp.DependencyValue= dvalue;
//               dtemp.ResolvedValue = rvalue;
//               cvobj.dep.add(dtemp);
//            }
//         }
//         //System.out.println("Value Stored : "+ cvobj.classmethodname + " " + cvobj.varname + " " + cvobj.CV);
//      } catch (IOException e) {
//         System.out.println("Error accessing input file!");
//      }
      // Debug Code : Checking after reading the Input pool of Conditional Values
//      if(debug) {
//         System.out.println("For the CV which need's to be evaluated : ");
//         System.out.println(" Program Element : <"+ pobj.EvalStatus + ","+ pobj.ClassName + ":"
//                 + pobj.MethodName + "," + pobj.TypeTag + "," + pobj.ParmNumber + ",<" + pobj.FieldList + ">>");
//         for (Dependency d1 : cvobj.dep) {
//            System.out.println(" Dependency : <<" + d1.p.EvalStatus + "," +d1.p.ClassName + ":" +
//                    d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>,"+
//                    d1.DependencyValue + ","+ d1.ResolvedValue+ ">;");
//         }
//      }
      // Calling the Fixed Point Algorithm
      Fixpointalgo(InputCV);
//      for (Dependency ch1 : fp.keySet()) {
//         System.out.println("After Fixed Point Dependency Value : <<" + ch1.p.EvalStatus + "," + ch1.p.ClassName + ":" + ch1.p.MethodName + "," + ch1.p.TypeTag  + ",<" + ch1.p.FieldList + ">>," + ch1.DependencyValue + "," + ch1.ResolvedValue + ">  =  " + fp.get(ch1));
//      }
      // Evaluation
//      int count = 1;
//      for (PE p1 : transmap.keySet()) {
//         System.out.println(count++ + " Program Element : <"+ p1.EvalStatus + ","+ p1.ClassName + ":"
//                 + p1.MethodName + "," + p1.TypeTag + "," + p1.ParmNumber + ",<" + p1.FieldList + ">>");
//         for (Dependency d1 : transmap.get(p1).dep) {
//            System.out.println(" Dependency : <<" + d1.p.EvalStatus + "," +d1.p.ClassName + ":" +
//                    d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>,"+
//                    d1.DependencyValue + ","+ d1.ResolvedValue+ ">;");
//         }
//      }
      System.out.println();
      //Evaluate(transmap,pobj,fp);
      return _ret;
   }

   /**
    * f0 -> ProgramElement()
    * f1 -> " = "
    * f2 -> ( ConditionalValues() )*
    */
   public R visit(CompleteConditionalValues n, A argu) {
      R _ret=null;
      PE tmp = (PE) n.f0.accept(this, argu);
      //System.out.println("Out: "+ tmp.EvalStatus + " "+ tmp.ClassName+ " " + tmp.MethodName+ " " + tmp.TypeTag+ " " + tmp.ParmNumber+ " " + tmp.FieldList);
      CV cvobj1 = createCV();
      List<Dependency> LocalList = new ArrayList<Dependency>();
      argu = (A) LocalList;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      for (Dependency e : LocalList ) {
         cvobj1.dep.add(e);
      }
      InputCV.put(tmp,cvobj1);
      //System.out.println("After");
      return _ret;
   }

   /**
    * f0 -> "<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ParmNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">"
    */
   public R visit(ProgramElement n, A argu) {
      R _ret=null;
      PE pobj = new PE();
      n.f0.accept(this, argu);
      pobj.EvalStatus = Estatus.valueOf((String) n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      pobj.ClassName = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      pobj.MethodName = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      pobj.TypeTag =    Ttag.valueOf((String) n.f7.accept(this, argu));
      n.f8.accept(this, argu);
      pobj.ParmNumber = Integer.parseInt((String) n.f9.accept(this, argu));
      n.f10.accept(this, argu);
      pobj.FieldList = (String) n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return (R) pobj;
   }

   /**
    * f0 -> LocalType()
    *       | ParameterType()
    *       | ReturnType()
    *       | ArgumentType()
    *       | FieldType()
    */
   public R visit(ConditionalValues n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ParmNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public R visit(LocalType n, A argu) {
      R _ret=null;
      List l1 = (List) argu;
      Dependency D1 = new Dependency();
      n.f0.accept(this, argu);
      D1.p.EvalStatus = Estatus.valueOf((String) n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      D1.p.ClassName = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      D1.p.MethodName = (String)  n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      D1.p.TypeTag = Ttag.valueOf((String) n.f7.accept(this, argu));
      n.f8.accept(this, argu);
      D1.p.ParmNumber = Integer.parseInt((String) n.f9.accept(this, argu));
      n.f10.accept(this, argu);
      D1.p.FieldList = (String) n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      D1.DependencyValue = DEval.valueOf((String) n.f13.accept(this, argu));
      n.f14.accept(this, argu);
      D1.ResolvedValue = DEval.valueOf((String) n.f15.accept(this, argu));
      n.f16.accept(this, argu);
      //System.out.println("Values : "+ D1.EvalStatus + " "+ D1.ClassName + " "+ D1.MethodName + " "+ D1.Dependent + " "+ D1.TypeTag + " "+ D1.ParmNumber + " "+ D1.DependencyValue + " "+ D1.ResolvedValue );
      l1.add(D1);
      //if(EvalStatus.equals("Static")) {
      //if(dependentvalue.equals("D") && eval_res.equals("D")) {
      //eval_res = "D";
      //} else {
      //	eval_res = "E";
      //}
      // } else {
      //	partial_flag = true;
      //	eval_res += " ^ <<"+ EvalStatus + "," + classname + ":" + methodname + "," + dependent + "," + typetag + ","+ number +">," + dependentvalue + "," + resolvedvalue + "> " ;
      //}
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ParmNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public R visit(ParameterType n, A argu) {
      R _ret=null;
      List l1 = (List) argu;
      Dependency D1 = new Dependency();
      n.f0.accept(this, argu);
      D1.p.EvalStatus = Estatus.valueOf((String) n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      D1.p.ClassName = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      D1.p.MethodName = (String)  n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      D1.p.TypeTag = Ttag.valueOf((String) n.f7.accept(this, argu));
      n.f8.accept(this, argu);
      D1.p.ParmNumber = Integer.parseInt((String) n.f9.accept(this, argu));
      n.f10.accept(this, argu);
      D1.p.FieldList = (String) n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      D1.DependencyValue = DEval.valueOf((String) n.f13.accept(this, argu));
      n.f14.accept(this, argu);
      D1.ResolvedValue = DEval.valueOf((String) n.f15.accept(this, argu));
      n.f16.accept(this, argu);
      //System.out.println("Values : "+ D1.EvalStatus + " "+ D1.ClassName + " "+ D1.MethodName + " "+ D1.Dependent + " "+ D1.TypeTag + " "+ D1.ParmNumber + " "+ D1.DependencyValue + " "+ D1.ResolvedValue );
      l1.add(D1);
      //if(EvalStatus.equals("Static")) {
      //if(dependentvalue.equals("D") && eval_res.equals("D")) {
      //eval_res = "D";
      //} else {
      //	eval_res = "E";
      //}
      // } else {
      //	partial_flag = true;
      //	eval_res += " ^ <<"+ EvalStatus + "," + classname + ":" + methodname + "," + dependent + "," + typetag + ","+ number +">," + dependentvalue + "," + resolvedvalue + "> " ;
      //}
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ParmNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public R visit(ReturnType n, A argu) {
      R _ret=null;
      List l1 = (List) argu;
      Dependency D1 = new Dependency();
      n.f0.accept(this, argu);
      D1.p.EvalStatus = Estatus.valueOf((String) n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      D1.p.ClassName = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      D1.p.MethodName = (String)  n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      D1.p.TypeTag = Ttag.valueOf((String) n.f7.accept(this, argu));
      n.f8.accept(this, argu);
      D1.p.ParmNumber = Integer.parseInt((String) n.f9.accept(this, argu));
      n.f10.accept(this, argu);
      D1.p.FieldList = (String) n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      D1.DependencyValue = DEval.valueOf((String) n.f13.accept(this, argu));
      n.f14.accept(this, argu);
      D1.ResolvedValue = DEval.valueOf((String) n.f15.accept(this, argu));
      n.f16.accept(this, argu);
      //System.out.println("Values : "+ D1.EvalStatus + " "+ D1.ClassName + " "+ D1.MethodName + " "+ D1.Dependent + " "+ D1.TypeTag + " "+ D1.ParmNumber + " "+ D1.DependencyValue + " "+ D1.ResolvedValue );
      l1.add(D1);
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ArgNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public R visit(ArgumentType n, A argu) {
      R _ret=null;
      List l1 = (List) argu;
      Dependency D1 = new Dependency();
      n.f0.accept(this, argu);
      D1.p.EvalStatus = Estatus.valueOf((String) n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      D1.p.ClassName = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      D1.p.MethodName = (String)  n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      D1.p.TypeTag = Ttag.valueOf((String) n.f7.accept(this, argu));
      n.f8.accept(this, argu);
      D1.p.ParmNumber = Integer.parseInt((String) n.f9.accept(this, argu));
      n.f10.accept(this, argu);
      D1.p.FieldList = (String) n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      D1.DependencyValue = DEval.valueOf((String) n.f13.accept(this, argu));
      n.f14.accept(this, argu);
      D1.ResolvedValue = DEval.valueOf((String) n.f15.accept(this, argu));
      n.f16.accept(this, argu);
      //System.out.println("Values : "+ D1.EvalStatus + " "+ D1.ClassName + " "+ D1.MethodName + " "+ D1.Dependent + " "+ D1.TypeTag + " "+ D1.ParmNumber + " "+ D1.DependencyValue + " "+ D1.ResolvedValue );
      l1.add(D1);
      //if(EvalStatus.equals("Static")) {
      //if(dependentvalue.equals("D") && eval_res.equals("D")) {
      //eval_res = "D";
      //} else {
      //	eval_res = "E";
      //}
      // } else {
      //	partial_flag = true;
      //	eval_res += " ^ <<"+ EvalStatus + "," + classname + ":" + methodname + "," + dependent + "," + typetag + ","+ number +">," + dependentvalue + "," + resolvedvalue + "> " ;
      //}
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> EvalStatus()
    * f2 -> ","
    * f3 -> ClassName()
    * f4 -> ":"
    * f5 -> MethodName()
    * f6 -> ","
    * f7 -> TypeTag()
    * f8 -> ","
    * f9 -> ArgNumber()
    * f10 -> ","
    * f11 -> FieldList()
    * f12 -> ">,"
    * f13 -> DependencyValue()
    * f14 -> ","
    * f15 -> ResolvedValue()
    * f16 -> ">;"
    */
   public R visit(FieldType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "Static"
    *       | "Dynamic"
    */
   public R visit(EvalStatus n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.choice.toString();
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ClassNameRest() )*
    */
   public R visit(ClassName n, A argu) {
      R _ret=null;
      String className = (String) n.f0.accept(this, argu);
      for (Node i : n.f1.nodes) {
         className += "." + i.accept(this,argu);
      }
      return (R) className;
   }

   /**
    * f0 -> "."
    * f1 -> Identifier()
    */
   public R visit(ClassNameRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    */
   public R visit(MethodName n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "local1"
    *       | "argmnt"
    *       | "parmtr"
    *       | "retrn"
    *       | "field5"
    */
   public R visit(TypeTag n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.choice.toString();
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(ArgNumber n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(ParmNumber n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "<"
    * f1 -> Identifier()
    * f2 -> ">"
    */
   public R visit(FieldList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "D"
    *       | "E"
    */
   public R visit(DependencyValue n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.choice.toString();
      return _ret;
   }

   /**
    * f0 -> "D"
    *       | "E"
    */
   public R visit(ResolvedValue n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.choice.toString();
      return _ret;
   }
}
