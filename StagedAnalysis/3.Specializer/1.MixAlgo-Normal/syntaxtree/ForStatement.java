//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "for"
 * f1 -> "("
 * f2 -> Type()
 * f3 -> Identifier()
 * f4 -> ":"
 * f5 -> Identifier()
 * f6 -> "."
 * f7 -> Identifier()
 * f8 -> ( "(" ")" )*
 * f9 -> ")"
 * f10 -> Statement()
 */
public class ForStatement implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public Type f2;
   public Identifier f3;
   public NodeToken f4;
   public Identifier f5;
   public NodeToken f6;
   public Identifier f7;
   public NodeListOptional f8;
   public NodeToken f9;
   public Statement f10;

   public ForStatement(NodeToken n0, NodeToken n1, Type n2, Identifier n3, NodeToken n4, Identifier n5, NodeToken n6, Identifier n7, NodeListOptional n8, NodeToken n9, Statement n10) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
      f10 = n10;
   }

   public ForStatement(Type n0, Identifier n1, Identifier n2, Identifier n3, NodeListOptional n4, Statement n5) {
      f0 = new NodeToken("for");
      f1 = new NodeToken("(");
      f2 = n0;
      f3 = n1;
      f4 = new NodeToken(":");
      f5 = n2;
      f6 = new NodeToken(".");
      f7 = n3;
      f8 = n4;
      f9 = new NodeToken(")");
      f10 = n5;
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

