//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

import javax.swing.plaf.synth.SynthTextAreaUI;
import java.util.*;
import java.io.*;
import java.io.File;
import java.util.Map.Entry;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
// Class for storing the dependency values.
class PE {
   String EvalStatus;
   String ClassName;
   String MethodName;
   String TypeTag;
   String ParmNumber;
   String FieldList;
}
// Class for storing the dependency
class Dependency {
   PE p = new PE();
   String DependencyValue;
   String ResolvedValue;
};
// Class for storing the conditional values.
class CV {
   List<Dependency> dep = new ArrayList<Dependency>();
};

class Env {
   Map<String, Object > localvar = new HashMap<>();
}

class Result {
   Map<Dependency, String> worklist = new HashMap<>();
   Map<Dependency, String> worklistnew = new HashMap<>();
   //Map<Dependency, String> tempworklistnew = new HashMap<>();
   Map<String, String> globalvariable = new HashMap<>();
   //Map<String, String > varlist = new HashMap<>();
   ArrayList<String> code = new ArrayList<>();
   ArrayList<String> pr = new ArrayList<>();
}



public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   int counter = 1;
   BufferedWriter bw;
   private boolean fl;

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   // Map to store all the conditional values.
   Map<PE, CV> InputCV = new HashMap<>();
   // Create a CV object
   CV createCV(){
      CV a = new CV();
      a.dep = new ArrayList<Dependency>();
      return a;
   }

   boolean checkequals (Result p1, Result p2) {
      // check for worklist
      boolean retworklist = p1.worklist.entrySet().stream().filter(value -> p2.worklist.entrySet().stream().anyMatch(value1 -> (value1.getKey() == value.getKey() && value1.getValue() == value.getValue()))).findAny().isPresent();
      //System.out.println("ret worklist : "+ retworklist);
      if(retworklist == false) {
         //System.out.println("Worklist");
         return false;
      }
      boolean retworklistnew = p1.worklistnew.entrySet().stream().filter(value -> p2.worklistnew.entrySet().stream().anyMatch(value1 -> (value1.getKey() == value.getKey() && value1.getValue() == value.getValue()))).findAny().isPresent();
      //System.out.println("retworklui" + retworklistnew);
      if(retworklistnew == false) {
         //System.out.println("Worklistnew");
         return false;
      }


      boolean retcode = p1.code.equals(p2.code);
      if(retcode == false){
         //System.out.println("Retcode");
         return false;
      }
      boolean retpr = p1.pr.equals(p2.pr);
      if (retpr == false) {
         //System.out.println("Retpr");
         return false;
      }
      //System.out.println("Bool value : "+ b);
      return true;
   }

   void copyobjects (Result p1, Result p2) {
      // check for worklist
      for(Dependency d1 : p1.worklist.keySet()) {
         p2.worklist.put(d1, p1.worklist.get(d1));
      }

      for(Dependency d1 : p1.worklistnew.keySet()) {
         p2.worklistnew.put(d1, p1.worklistnew.get(d1));
      }

      for (String s1 : p1.code) {
         p2.code.add(s1);
      }

      for (String s1 : p1.pr) {
         p2.pr.add(s1);
      }

   }

   Result res = new Result();


   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> Statement()
    * f14 -> "}"
    * f15 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      PE pobj = new PE();
      CV cvobj = createCV();


      // Reading the Input File (Storing for the object which need to be actually evaluated)

      try {
         int flag = 1;
         String estatus = "";
         String cname = "";
         String mname = "";
         String ttype = "";
         String pnumber = "";
         String flist = "";
         String dvalue = "";
         String rvalue = "";

         Scanner s = new Scanner(new File("CV.txt"));
         String dep = s.nextLine();
         StringTokenizer multiTokenizer = new StringTokenizer(dep, "<<,>,>;=: ");

         pobj.EvalStatus = multiTokenizer.nextToken();
         pobj.ClassName = multiTokenizer.nextToken();
         pobj.MethodName = multiTokenizer.nextToken();
         pobj.TypeTag = multiTokenizer.nextToken();
         pobj.ParmNumber = multiTokenizer.nextToken();
         pobj.FieldList = multiTokenizer.nextToken();
         while (multiTokenizer.hasMoreTokens()) {
            //System.out.println("Value Stored1 :" + multiTokenizer.nextToken());
            if (flag == 1) {
               estatus = multiTokenizer.nextToken();
               flag++;
            }
            else if (flag == 2) {
               cname = multiTokenizer.nextToken();
               flag++;
            }
            else if(flag == 3) {
               mname = multiTokenizer.nextToken();
               flag++;
            }
            else if(flag == 4) {
               ttype = multiTokenizer.nextToken();
               flag++;
            }
            else if(flag == 5) {
               pnumber = multiTokenizer.nextToken();
               flag++;
            }
            else if(flag == 6) {
               flist = multiTokenizer.nextToken();
               flag++;
            }
            else if(flag == 7) {
               dvalue = multiTokenizer.nextToken();
               flag++;
            }
            else if(flag == 8) {
               rvalue = multiTokenizer.nextToken();
               flag = 1;
               Dependency dtemp = new Dependency();
               dtemp.p.EvalStatus = estatus;
               dtemp.p.ClassName = cname;
               dtemp.p.MethodName = mname;
               dtemp.p.TypeTag = ttype;
               dtemp.p.ParmNumber = pnumber;
               dtemp.p.FieldList = flist;
               dtemp.DependencyValue= dvalue;
               dtemp.ResolvedValue = rvalue;
               cvobj.dep.add(dtemp);
            }
         }
         //System.out.println("Value Stored : "+ cvobj.classmethodname + " " + cvobj.varname + " " + cvobj.CV);
      } catch (IOException e) {
         System.out.println("Error accessing input file!");
      }
      // Debug Code : Checking after reading the Input pool of Conditional Values
//      System.out.println("1. Read the CV for which evaluator needs to be specialized : ");
//      System.out.println("* Program Element : <"+ pobj.EvalStatus + ","+ pobj.ClassName + ":"
//              + pobj.MethodName + "," + pobj.TypeTag + "," + pobj.ParmNumber + ",<" + pobj.FieldList + ">>");
//      for (Dependency d1 : cvobj.dep) {
//         System.out.println("* Dependency : <<" + d1.p.EvalStatus + "," +d1.p.ClassName + ":" +
//                 d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>,"+
//                 d1.DependencyValue + ","+ d1.ResolvedValue+ ">;");
//         //res.worklist.put(d1,"null");
//      }

//      System.out.println("\n2. Worklist Value at starting");
//      for(Dependency d : res.worklist.keySet()) {
//         System.out.println(" Worklist contains :  <<" + d.p.EvalStatus + "," +d.p.ClassName + ":" +
//                 d.p.MethodName + "," + d.p.TypeTag + "," + d.p.ParmNumber + "<" + d.p.FieldList + ">>,"+
//                 d.DependencyValue + ","+ d.ResolvedValue+ ">;" + " with value --> " + res.worklist.get(d));
//      }
      BufferedReader br = null;
      try {
         File file = new File("PartialRes.txt"); // java.io.File
         FileReader fr = new FileReader(file); // java.io.FileReader
         br = new BufferedReader(fr); // java.io.BufferedReader
         String line;

         while ((line = br.readLine()) != null) {
            StringTokenizer multiTokenizer = new StringTokenizer(line, "^,<<,>,>;=: ");
            PE peobj = new PE();
            CV cvobj2 = createCV();
            boolean prflag =false;
            peobj.EvalStatus = multiTokenizer.nextToken();
            peobj.ClassName = multiTokenizer.nextToken();
            peobj.MethodName = multiTokenizer.nextToken();
            peobj.TypeTag = multiTokenizer.nextToken();
            peobj.ParmNumber = multiTokenizer.nextToken();
            peobj.FieldList = multiTokenizer.nextToken();
            int flag = 1;
            boolean tmpflag = false;
            String estatus = "";
            String cname = "";
            String mname = "";
            String ttype = "";
            String pnumber = "";
            String flist = "";
            String dvalue = "";
            String rvalue = "";
            multiTokenizer.nextToken();
            while (multiTokenizer.hasMoreTokens()) {
               prflag = true;
               //System.out.println("Value Stored1 :" + multiTokenizer.nextToken());
               if (flag == 1) {
                  estatus = multiTokenizer.nextToken();
                  flag++;
               }
               else if (flag == 2) {
                  cname = multiTokenizer.nextToken();
                  flag++;
               }
               else if(flag == 3) {
                  mname = multiTokenizer.nextToken();
                  flag++;
               }
               else if(flag == 4) {
                  ttype = multiTokenizer.nextToken();
                  flag++;
               }
               else if(flag == 5) {
                  pnumber = multiTokenizer.nextToken();
                  flag++;
               }
               else if(flag == 6) {
                  flist = multiTokenizer.nextToken();
                  flag++;
               }
               else if(flag == 7) {
                  dvalue = multiTokenizer.nextToken();
                  flag++;
               }
               else if(flag == 8) {
                  rvalue = multiTokenizer.nextToken();
                  flag = 1;
                  Dependency dtemp = new Dependency();
                  dtemp.p.EvalStatus = estatus;
                  dtemp.p.ClassName = cname;
                  dtemp.p.MethodName = mname;
                  dtemp.p.TypeTag = ttype;
                  dtemp.p.ParmNumber = pnumber;
                  dtemp.p.FieldList = flist;
                  dtemp.DependencyValue= dvalue;
                  dtemp.ResolvedValue = rvalue;
                  cvobj2.dep.add(dtemp);
               }
            }
            if(prflag) {
               InputCV.put(peobj, cvobj2);
            }

         }
      } catch (Exception e) {}

      //System.out.println("\n 3. * * * * * * All the CV's * * * * * *");
      try {
      FileWriter fs = new FileWriter("output/SpecializedCode.java");
      bw = new BufferedWriter(fs);
      bw.write("import java.io.BufferedReader;\n" +
              "import java.io.File;\n" +
              "import java.io.FileReader;\n" +
              "import java.io.IOException;\n" +
              "import java.util.HashMap;\n" +
              "import java.util.Map;\n" +
              "import java.util.Scanner;\n" +
              "import java.util.StringTokenizer;\n \n" +
              "public class SpecializedCode {");

      int count = 1;
      for (PE p1 : InputCV.keySet()) {
         res = new Result();
         bw.write("\n public void eval"+count++ +"(Map<PE,String> dynamicval) {" +
                 "  \n String res = \"\"; \n" +
                 "   boolean tmpflag = true;\n "+
                 "   System.out.print(\"  For Program Element = <"+ p1.EvalStatus + "," + p1.ClassName + ":" +
                     p1.MethodName + "," + p1.TypeTag + "," + p1.ParmNumber + ",<" + p1.FieldList + ">>\");\n" );
         bw.flush();
         //System.out.println(count++ + " Program Element : <" + p1.EvalStatus + "," + p1.ClassName + ":"
         //        + p1.MethodName + "," + p1.TypeTag + "," + p1.ParmNumber + ",<" + p1.FieldList + ">>");
         for (Dependency d1 : InputCV.get(p1).dep) {
            //System.out.println(" Dependency : <<" + d1.p.EvalStatus + "," + d1.p.ClassName + ":" +
            //        d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>," +
            //        d1.DependencyValue + "," + d1.ResolvedValue + ">;");
            res.worklist.put(d1, "null");
         }

         // Reading the Input File (Storing for the object which need to be actually evaluated)

//      CV tcvobj = createCV();
//      try {
//         int flag = 1;
//         String estatus = "";
//         String cname = "";
//         String mname = "";
//         String ttype = "";
//         String pnumber = "";
//         String flist = "";
//         String dvalue = "";
//         String rvalue = "";
//
//         Scanner s = new Scanner(new File("EvalOut.txt"));
//         String dep = s.nextLine();
//         StringTokenizer multiTokenizer = new StringTokenizer(dep, "^,<<,>,>;=: ");
//         multiTokenizer.nextToken();
//         while (multiTokenizer.hasMoreTokens()) {
//            //System.out.println("Value Stored1 :" + multiTokenizer.nextToken());
//            if (flag == 1) {
//               estatus = multiTokenizer.nextToken();
//               System.out.println("Value Stored1 :" + estatus);
//               flag++;
//            }
//            else if (flag == 2) {
//               cname = multiTokenizer.nextToken();
//               System.out.println("Value Stored1 :" + cname);
//               flag++;
//            }
//            else if(flag == 3) {
//               mname = multiTokenizer.nextToken();
//               System.out.println("Value Stored1 :" + mname);
//               flag++;
//            }
//            else if(flag == 4) {
//               ttype = multiTokenizer.nextToken();
//               System.out.println("Value Stored1 :" + ttype);
//               flag++;
//            }
//            else if(flag == 5) {
//               pnumber = multiTokenizer.nextToken();
//               System.out.println("Value Stored1 :" + pnumber);
//               flag++;
//            }
//            else if(flag == 6) {
//               flist = multiTokenizer.nextToken();
//               System.out.println("Value Stored1 :" + flist);
//               flag++;
//            }
//            else if(flag == 7) {
//               dvalue = multiTokenizer.nextToken();
//               System.out.println("Value Stored1 :" + dvalue);
//               flag++;
//            }
//            else if(flag == 8) {
//               rvalue = multiTokenizer.nextToken();
//               System.out.println("Value Stored in rvalue :" + rvalue);
//               flag = 1;
//               Dependency dtemp2 = new Dependency();
//               dtemp2.p.EvalStatus = estatus;
//               dtemp2.p.ClassName = cname;
//               dtemp2.p.MethodName = mname;
//               dtemp2.p.TypeTag = ttype;
//               dtemp2.p.ParmNumber = pnumber;
//               dtemp2.p.FieldList = flist;
//               dtemp2.DependencyValue= dvalue;
//               dtemp2.ResolvedValue = rvalue;
//               //System.out.println(" Values : "+ dtemp2.p.EvalStatus + ","+ dtemp2.p.MethodName);
//               tcvobj.dep.add(dtemp2);
//            }
//         }
//         //System.out.println("Value Stored : "+ cvobj.classmethodname + " " + cvobj.varname + " " + cvobj.CV);
//      } catch (IOException e) {
//         System.out.println("Error accessing input file!");
//      }
//      for (Dependency d1 : tcvobj.dep) {
//         System.out.println("* Dependency : <<" + d1.p.EvalStatus + "," +d1.p.ClassName + ":" +
//                 d1.p.MethodName + "," + d1.p.TypeTag + "," + d1.p.ParmNumber + "<" + d1.p.FieldList + ">>,"+
//                 d1.DependencyValue + ","+ d1.ResolvedValue+ ">;");
//         res.worklist.put(d1,"null");
//      }

//         System.out.println("\n2. Worklist Value at starting");
//         for (Dependency d : res.worklist.keySet()) {
//            System.out.println(" Worklist contains :  <<" + d.p.EvalStatus + "," + d.p.ClassName + ":" +
//                    d.p.MethodName + "," + d.p.TypeTag + "," + d.p.ParmNumber + "<" + d.p.FieldList + ">>," +
//                    d.DependencyValue + "," + d.ResolvedValue + ">;" + " with value --> " + res.worklist.get(d));
//         }
//         System.out.println("\n----------------    After Pre-Processing   -------------------");

            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            n.f7.accept(this, argu);
            n.f8.accept(this, argu);
            n.f9.accept(this, argu);
            n.f10.accept(this, argu);
            n.f11.accept(this, argu);
            n.f12.accept(this, argu);
            n.f13.accept(this, argu);
            n.f14.accept(this, argu);
            n.f15.accept(this, argu);

//            System.out.println("\n----------------    After Pre-Processing   -------------------");
//            System.out.println(" The final Pair of result");
//            System.out.println(" Specialized Code : " + res.code);
//            System.out.println(" Partial Result : " + res.pr);


            bw.write( "\n      if(tmpflag) { \n" +
                    "           System.out.println(\"   The Evaluated result is : D \");\n" +
                    "      }\n"+
                    "} ");
            bw.flush();

         }
      bw.write("\n}");
      bw.flush();
      } catch (Exception e) {e.printStackTrace();}
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | DeclaredAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    *       | ForStatement()
    *       | MessageSendStmt()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //System.out.println("Entered");
      ArrayList<String> arr = new ArrayList<>();
      String blockret = "";
      for (Node i : n.f1.nodes) {
         blockret+= i.accept(this,argu) + "\n" ;
      }
      //System.out.println("ret " + blockret);
      n.f2.accept(this, argu);
      return (R) blockret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String ident = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String compstmt = ident + " = " + exp;
      return (R) compstmt;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> "="
    * f3 -> Expression()
    * f4 -> ";"
    */
   public R visit(DeclaredAssignmentStatement n, A argu) {
      R _ret=null;
      String type = (String) n.f0.accept(this, argu);
      String var = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String value = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(value != null){
         if(value.startsWith("\"")) {
            value = value.replace("\"", "");
         }
      }
      //System.out.println("Expression : "+ type + " "+ var + " = " + value );
      res.globalvariable.put(var,value);
      String stmt = type+ " " + var + " = " + value;
      return (R) stmt;
   }

   /**
    * f0 -> IfthenElseifStatement()
    *       | IfthenelseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenelseStatement n, A argu) {
      R _ret=null;
      //System.out.println(" In IfthenelseStatementStatement");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      //System.out.println(" In IfthenStatement");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String iden = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      //if(iden)
      n.f4.accept(this, argu);
      return (R) iden;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> ( "else if" "(" Identifier() ")" Statement() )*
    * f6 -> "else"
    * f7 -> Statement()
    */
   public R visit(IfthenElseifStatement n, A argu) {
      R _ret=null;
      //System.out.println(" In IfthenElseifStatement");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f5 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      String whilename  = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String ep1 = (String) ((MessageSend) n.f2.f0.choice).f2.accept(this, argu);
      String ep2 = (String) ((MessageSend) n.f2.f0.choice).f4.accept(this, argu);
      n.f3.accept(this, argu);


      if(ep1.equals("comparehashmaps")){
         String a[]= ep2.split(",");
         //System.out.println("Ep1 : "+ a[0]+ " --> "+ a[1]);
         boolean flag = true;
         int run = 1;
         if(a[0].equals("worklist") && a[1].equals("worklistnew")) {
            while(flag == true) {
               //System.out.println(" *********** While Loop Fix Point ******** : " + run++);
               //System.out.println("Worklist");
               //for (Dependency ch1 : res.worklist.keySet()) {
               //   System.out.println("Dependency : " + ch1.p.ClassName + ":"+ ch1.p.MethodName );
               //}
               //System.out.println("WorklistNew");
               //for (Dependency ch1 : res.worklistnew.keySet()) {
               //   System.out.println("Dependency : " + ch1.p.ClassName + ":"+ ch1.p.MethodName );
               //}
               if(res.worklist != null || res.worklistnew != null) {
                  //System.out.println("Reaching Inside");
                  for (Dependency ch1 : res.worklist.keySet()) {
                     try {
                        if (!res.worklist.get(ch1).equalsIgnoreCase(res.worklistnew.get(ch1))) {
                           //System.out.println("Reached here" + res.worklist.get(ch1) + " wk 2" + res.worklistnew.get(ch1));
                           flag = false;
                        }
                     } catch (Exception e) {
                     }
                  }

                  for (Dependency ch2 : res.worklistnew.keySet()) {
                     try {
                        if (!res.worklistnew.get(ch2).equalsIgnoreCase(res.worklist.get(ch2))) {
                           //System.out.println("Reached here" + res.worklist.get(ch2) + " wk 2" + res.worklistnew.get(ch2));
                           flag = false;
                        }
                     } catch (Exception e) {
                     }
                  }
               }
               if (!flag) {

                  Env env = new Env();
                  argu = (A) env;
                  n.f4.accept(this, argu);
                  //System.out.println(" ******* We are comign here *********** " + flag);
               }
            }
         }
      }
      //String  e = whilename + "( "+ ep1 + ") {";
      //System.out.println("esp value : "+ ep1+ " --> "+  ep2);
      //r.code.add(e);
      //r.code.add("}");

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Type()
    * f3 -> Identifier()
    * f4 -> ":"
    * f5 -> Identifier()
    * f6 -> "."
    * f7 -> Identifier()
    * f8 -> ( "(" ")" )*
    * f9 -> ")"
    * f10 -> Statement()
    */
   public R visit(ForStatement n, A argu) {
      R _ret=null;
      Env e = (Env) argu;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = (String) n.f2.accept(this, argu);
      String var = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String map = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      String iter = (String) n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);

      //System.out.println(" ******* Before Execution values are : ******* ");
      //System.out.println("In worklist");
      //for(Dependency d1 : res.worklist.keySet()) {
      //   System.out.println(" Dependency "+ d1.p.ClassName +":" + d1.p.MethodName + "," + d1.p.TypeTag + ","+ d1.p.FieldList + " and value =  "+ res.worklist.get(d1));
      //}
      //System.out.println("In worklistnew");
      //for(Dependency d2 : res.worklistnew.keySet()) {
      //   System.out.println(" Dependency "+ d2.p.ClassName +":" + d2.p.MethodName + "," + d2.p.TypeTag + ","+ d2.p.FieldList + " and value =  "+ res.worklistnew.get(d2));
      //}


      //String statement = (String) n.f10.accept(this, argu);
      //System.out.println("**************** New for Loop  *************");
      //System.out.println("For Loop values: "+ type + " "+ var + " "+ map + " "+ iter);

      //System.out.println(" Statement : \n"+ statement);
      Result temp = new Result();
      try {
         int run = 1;
      List<Dependency> dtemp = new ArrayList<>();
      int count =1;
      while(!checkequals(res,temp)) {
         copyobjects(res, temp);
         //System.out.println(" --------------- Inside for Loop Fix Point -------------- : "+ run++);
         if (type.equals("Dependency") && map.equals("worklist")) {
            for (Dependency d : res.worklist.keySet()) {
               //System.out.println();
               e.localvar.put(var, d);
               //System.out.println("###### Value of d :"+ d.p.EvalStatus + " and " + d.p.ClassName + ":" + d.p.MethodName + "," + d.p.TypeTag + "," + d.p.ParmNumber);
               for (Node x : ((Block) n.f10.f0.choice).f1.nodes) {
                  //System.out.println();
                  Evaluate e1 = new Evaluate();
                  //System.out.println("Statemnt : "+ x);
                  Node y = ((Statement) x).f0.choice;
                  //System.out.println("Statement Type is : " + y.getClass().getName());
                  if (y instanceof DeclaredAssignmentStatement) {
                     //System.out.println("*******1");
                     e1.Eval((DeclaredAssignmentStatement) y, this, res.worklist, res, e);
                  } else if (y instanceof MessageSendStmt) {
                     //System.out.println("here");
                     if (((MessageSendStmt) y).f0.f0.accept(this, argu).toString().equals("worklist")) {
                        e1.Eval((MessageSendStmt) y, this, res.worklist, res, e);
                     } else if (((MessageSendStmt) y).f0.f0.accept(this, argu).toString().equals("worklistnew")) {
                        //System.out.println("From Here");
                        e1.Eval((MessageSendStmt) y, this, res.worklistnew, res, e);
                     }
                  } else if( y instanceof IfStatement ) {
                     boolean ret = e1.Eval((IfStatement) y, this, res.worklistnew, res, e);
                     if(ret) {
                        //System.out.println("Size : "+ ((Block)((IfthenStatement)((IfStatement) y).f0.choice).f4.f0.choice).f1.nodes.size());
                        for(Node x2 :((Block)((IfthenStatement)((IfStatement) y).f0.choice).f4.f0.choice).f1.nodes) {
                           //System.out.println(" X2 value : "+ x2.getClass().getName());
                        }
                        //System.out.println(" Value received : "+ (((IfthenStatement)((IfStatement)(((Statement) x).f0.choice)).f0.choice).f4.f0.choice).accept(this,argu));
                        continue;
                     } else {
                        if(d.p.EvalStatus.equals("Dynamic")) {
                           //System.out.println("For Dependency : "+ d.p.ClassName + " : "+ d.p.MethodName);
                           if(!dtemp.contains(d)) {
                              try {
                                 e1.copy(res, d, bw, count++);
                                 dtemp.add(d);
                              } catch (Exception ex) {}
                           }
                        }

                     }
                  }
                  //System.out.println("X value : " + x.accept(this, argu));
                  // Send it to the Evaluator to evaluate each line in for loop
               }
            }
         }
      }
      } catch (Exception e1) {}
      //for(String s : e.localvar.keySet()) {
      //   System.out.println("String : "+ s + "Value --> "+ e.localvar.get(s));
      //}
      //System.out.println("****************");
      //for(String s : res.globalvariable.keySet()) {
      //   System.out.println("String : "+ s + " with Value --> "+ e.localvar.get(s));
      //}
      //System.out.println(" ******* After Execution values are : ******* ");
      //System.out.println("In worklist");
      //for(Dependency d1 : res.worklist.keySet()) {
      //   System.out.println(" Dependency "+ d1.p.ClassName +":" + d1.p.MethodName + "," + d1.p.TypeTag + ","+d1.p.ParmNumber + ","+  d1.p.FieldList + " and value =  "+ res.worklist.get(d1));
      //}
      //System.out.println("In worklistnew");
      //for(Dependency d2 : res.worklistnew.keySet()) {
      //   System.out.println(" Dependency "+ d2.p.ClassName +":" + d2.p.MethodName + "," + d2.p.TypeTag + ","+ d2.p.ParmNumber + ","+ d2.p.FieldList + " and value =  "+ res.worklistnew.get(d2));
      //}
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> BooleanType()
    *       | IntegerType()
    *       | StringType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "String"
    */
   public R visit(StringType n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> MessageSend()
    * f1 -> ";"
    */
   public R visit(MessageSendStmt n, A argu) {
      R _ret=null;
      String messsnd = (String) n.f0.accept(this, argu);
      //System.out.println("Message send : "+ messsnd);
      n.f1.accept(this, argu);
      return (R) messsnd;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | FieldLookup()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String receiver = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String func = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String expr = (String) n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      //System.out.println("At Message send :" + receiver + " "+ func + " "+ expr);
      String messagesend = receiver + "." + func + "." + expr;
      return (R) messagesend;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String exprlist = (String) n.f0.accept(this, argu);
      for (Node i : n.f1.nodes) {
         exprlist += "," + i.accept(this,argu);
      }
      return (R) exprlist;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(FieldLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | StringLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <STRINGLITERAL>
    */
   public R visit(StringLiteral n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      //System.out.println("Ret Value : "+ _ret.toString());
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String iden = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R) iden;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
