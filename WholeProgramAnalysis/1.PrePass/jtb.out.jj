//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(PrePass)
import syntaxtree.*;
import java.util.Vector;


public class PrePass 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(PrePass)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

TOKEN :
{
   <LBRACKET: "<">
   | <RBRACKET: ">">
   | <LBRACES: "{">
   | <RBRACES: "}">
   | <COMMA: ",">
   | <LPAREN: "(">
   | <RPAREN: ")">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <DONOTESCAPE: "D">
   | <ESCAPE: "E">
   | <LOCAL: "local1">
   | <RETURN: "retrn">
   | <PARAMETER: "parmtr">
   | <ARGUMENT: "argmnt">
   | <FIELD: "field2">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   NodeListOptional n0 = new NodeListOptional();
   CompleteConditionalValues n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=CompleteConditionalValues()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new Goal(n0,n2); }
}

CompleteConditionalValues CompleteConditionalValues() :
{
   ProgramElement n0;
   NodeToken n1;
   Token n2;
   NodeListOptional n3 = new NodeListOptional();
   ConditionalValues n4;

   
}
{
   n0=ProgramElement()
   n2=" = " { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=ConditionalValues()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new CompleteConditionalValues(n0,n1,n3); }
}

ProgramElement ProgramElement() :
{
   NodeToken n0;
   Token n1;
   ClassName n2;
   NodeToken n3;
   Token n4;
   MethodName n5;
   NodeToken n6;
   Token n7;
   TypeTag n8;
   NodeToken n9;
   Token n10;
   ParmNumber n11;
   NodeToken n12;
   Token n13;
   FieldList n14;
   NodeToken n15;
   Token n16;

   
}
{
   n1="<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassName()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=MethodName()
   n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=TypeTag()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=ParmNumber()
   n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=FieldList()
   n16=">" { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new ProgramElement(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15); }
}

ConditionalValues ConditionalValues() :
{
   NodeChoice n0;
   LocalType n1;
   ParameterType n2;
   ReturnType n3;
   ArgumentType n4;
   FieldType n5;

   
}
{
   (
      LOOKAHEAD(10)
      n1=LocalType()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(10)
      n2=ParameterType()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(10)
      n3=ReturnType()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(10)
      n4=ArgumentType()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(10)
      n5=FieldType()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new ConditionalValues(n0); }
}

LocalType LocalType() :
{
   NodeToken n0;
   Token n1;
   ClassName n2;
   NodeToken n3;
   Token n4;
   MethodName n5;
   NodeToken n6;
   Token n7;
   TypeTag n8;
   NodeToken n9;
   Token n10;
   ParmNumber n11;
   NodeToken n12;
   Token n13;
   FieldList n14;
   NodeToken n15;
   Token n16;
   DependencyValue n17;
   NodeToken n18;
   Token n19;
   ResolvedValue n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1="<<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassName()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=MethodName()
   n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=TypeTag()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=ParmNumber()
   n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=FieldList()
   n16=">," { n15 = JTBToolkit.makeNodeToken(n16); }
   n17=DependencyValue()
   n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
   n20=ResolvedValue()
   n22=">;" { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new LocalType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21); }
}

ParameterType ParameterType() :
{
   NodeToken n0;
   Token n1;
   ClassName n2;
   NodeToken n3;
   Token n4;
   MethodName n5;
   NodeToken n6;
   Token n7;
   TypeTag n8;
   NodeToken n9;
   Token n10;
   ParmNumber n11;
   NodeToken n12;
   Token n13;
   FieldList n14;
   NodeToken n15;
   Token n16;
   DependencyValue n17;
   NodeToken n18;
   Token n19;
   ResolvedValue n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1="<<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassName()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=MethodName()
   n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=TypeTag()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=ParmNumber()
   n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=FieldList()
   n16=">," { n15 = JTBToolkit.makeNodeToken(n16); }
   n17=DependencyValue()
   n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
   n20=ResolvedValue()
   n22=">;" { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new ParameterType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21); }
}

ReturnType ReturnType() :
{
   NodeToken n0;
   Token n1;
   ClassName n2;
   NodeToken n3;
   Token n4;
   MethodName n5;
   NodeToken n6;
   Token n7;
   TypeTag n8;
   NodeToken n9;
   Token n10;
   ParmNumber n11;
   NodeToken n12;
   Token n13;
   FieldList n14;
   NodeToken n15;
   Token n16;
   DependencyValue n17;
   NodeToken n18;
   Token n19;
   ResolvedValue n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1="<<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassName()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=MethodName()
   n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=TypeTag()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=ParmNumber()
   n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=FieldList()
   n16=">," { n15 = JTBToolkit.makeNodeToken(n16); }
   n17=DependencyValue()
   n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
   n20=ResolvedValue()
   n22=">;" { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new ReturnType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21); }
}

ArgumentType ArgumentType() :
{
   NodeToken n0;
   Token n1;
   ClassName n2;
   NodeToken n3;
   Token n4;
   MethodName n5;
   NodeToken n6;
   Token n7;
   TypeTag n8;
   NodeToken n9;
   Token n10;
   ArgNumber n11;
   NodeToken n12;
   Token n13;
   FieldList n14;
   NodeToken n15;
   Token n16;
   DependencyValue n17;
   NodeToken n18;
   Token n19;
   ResolvedValue n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1="<<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassName()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=MethodName()
   n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=TypeTag()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=ArgNumber()
   n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=FieldList()
   n16=">," { n15 = JTBToolkit.makeNodeToken(n16); }
   n17=DependencyValue()
   n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
   n20=ResolvedValue()
   n22=">;" { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new ArgumentType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21); }
}

FieldType FieldType() :
{
   NodeToken n0;
   Token n1;
   ClassName n2;
   NodeToken n3;
   Token n4;
   MethodName n5;
   NodeToken n6;
   Token n7;
   TypeTag n8;
   NodeToken n9;
   Token n10;
   ArgNumber n11;
   NodeToken n12;
   Token n13;
   FieldList n14;
   NodeToken n15;
   Token n16;
   DependencyValue n17;
   NodeToken n18;
   Token n19;
   ResolvedValue n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1="<<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassName()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=MethodName()
   n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=TypeTag()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=ArgNumber()
   n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=FieldList()
   n16=">," { n15 = JTBToolkit.makeNodeToken(n16); }
   n17=DependencyValue()
   n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
   n20=ResolvedValue()
   n22=">;" { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new FieldType(n0,n2,n3,n5,n6,n8,n9,n11,n12,n14,n15,n17,n18,n20,n21); }
}

ClassName ClassName() :
{
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassNameRest n2;

   
}
{
   n0=Identifier()
   (
      n2=ClassNameRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ClassName(n0,n1); }
}

ClassNameRest ClassNameRest() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new ClassNameRest(n0,n2); }
}

MethodName MethodName() :
{
   Identifier n0;

   
}
{
   n0=Identifier()
   
   { return new MethodName(n0); }
}

TypeTag TypeTag() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2="local1" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="argmnt" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="parmtr" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="retrn" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="field2" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new TypeTag(n0); }
}

ArgNumber ArgNumber() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ArgNumber(n0); }
}

ParmNumber ParmNumber() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ParmNumber(n0); }
}

FieldList FieldList() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Identifier n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="<" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Identifier()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5=">" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new FieldList(n0,n2,n4); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

DependencyValue DependencyValue() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2="D" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="E" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new DependencyValue(n0); }
}

ResolvedValue ResolvedValue() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2="D" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="E" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new ResolvedValue(n0); }
}
